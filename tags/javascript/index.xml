<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Engineering Health</title>
    <link>https://engineering.cerner.com/tags/javascript/</link>
    <description>Recent content in JavaScript on Engineering Health</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 22 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://engineering.cerner.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rock Solid Components with Typescript and GraphQL</title>
      <link>https://engineering.cerner.com/blog/rock-solid-components-w-typescript-graphql/</link>
      <pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.cerner.com/blog/rock-solid-components-w-typescript-graphql/</guid>
      <description>In June, we had the pleasure of having Mat Warger join us in our Tech Talk series at Oracle Cerner. Mat is a senior software developer based in Kansas City. He enjoys learning new concepts and has leveraged this curiosity in positions ranging from startups to the enterprise over the past decade. He is a co-organizer of the JavaScript KC meetup group and organizer of GraphQL KC meetup group. He can be found chasing the latest and (sometimes) greatest in a wide range of languages and platforms, including React, TypeScript, GraphQL, and the cloud.</description>
    </item>
    
    <item>
      <title>Building a Unified UI Component Library: Lessons Learned</title>
      <link>https://engineering.cerner.com/blog/building-a-unified-ui-component-library/</link>
      <pubDate>Thu, 13 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.cerner.com/blog/building-a-unified-ui-component-library/</guid>
      <description>Cerner is building an open source, mobile-first user interface component library for healthcare applications. Pulling years of experience and lessons learned across multiple teams together, we are creating something great. We are very excited to bring this solution to the public and to be contributing back to the community!
We didnâ€™t simply decide to create this library, we started with segmented UI libraries focused on different aspects of the company which had smaller isolated needs.</description>
    </item>
    
    <item>
      <title>Difficult Debugging: Learning From Utter Nonsense</title>
      <link>https://engineering.cerner.com/blog/difficult-debugging/</link>
      <pubDate>Wed, 13 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.cerner.com/blog/difficult-debugging/</guid>
      <description>Preface As software engineers we invest time into thinking about the problems we are trying to solve every day. Sometimes the problems we face are small or simple. Other times they are large and complex. Either way, we can usually draw from our experience to find a path forward.
While coding, we run into a lot of different bugs. Often, they are simple typos or a misuse of an API. These problems do not bog us down very much, and they are quick and easy to fix.</description>
    </item>
    
    <item>
      <title>Closures &amp; Currying in JavaScript</title>
      <link>https://engineering.cerner.com/blog/closures-and-currying-in-javascript/</link>
      <pubDate>Mon, 29 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.cerner.com/blog/closures-and-currying-in-javascript/</guid>
      <description>Preface I have been asked many times what closures are and how they work. There are many resources available to learn this concept, but they are not always clear to everyone. This has led me to put together my own approach to exchanging the information.
I will supply code samples. //&amp;gt; denotes an output or return.
Before discussing closures, it is important to review how functions work in JavaScript.
Introduction to functions If a function does not have a return statement, it will implicitly return undefined, which brings us to the simplest functions.</description>
    </item>
    
  </channel>
</rss>
