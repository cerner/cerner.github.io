<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Engineering Health]]></title>
  <link href="http://engineering.cerner.com/atom.xml" rel="self"/>
  <link href="http://engineering.cerner.com/"/>
  <updated>2020-02-24T12:38:28-06:00</updated>
  <id>http://engineering.cerner.com/</id>
  <author>
    <name><![CDATA[Cerner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ShipIt Day XVII]]></title>
    <link href="http://engineering.cerner.com/blog/shipit-xvii/"/>
    <updated>2020-02-24T00:00:00-06:00</updated>
    <id>http://engineering.cerner.com/blog/shipit-xvii</id>
    <content type="html"><![CDATA[<p>ShipIt Day, Cerner Engineering’s 24-hour hackathon, provides associates an environment to be creative, work on new projects, and network with other associates. This event is one of the many things that sit at the core of our <a href="https://engineering.cerner.com/blog/devculture-team">Engineering Culture</a> at Cerner, and is rapidly growing- now being hosted globally in Romania, Sweden, India, and the UK. In October, our team had the chance to participate in the seventeenth ShipIt Day at Kansas City’s <a href="https://engineering.cerner.com/blog/one-year-calling-innovations-home/">Innovations Campus</a> and managed to take home the Golden Keyboard trophy as the first place team!</p>

<div align="center">
  <table>
    <tr>
      <td align="center">
        <img class="center" src="http://engineering.cerner.com/assets/2020-02-24-shipit-xvii/z3ro_d4y-min.png" width="600">
        <sub>Left to Right - Sharynne Azhar, Vu Tran, Harish Pendyala, and Jordan Bush</sub>
      </td>
    </tr>
  </table>
</div>


<h2>Overview</h2>

<p>During this ShipIt challenge, our team&rsquo;s goal is to create a dashboard that tracks newly discovered <a href="https://cve.mitre.org/">CVEs</a> and displays any affected Cerner artifacts. The Z3R0 D4Y dashboard is a centralized place where teams can quickly go to identify and remediate any new security vulnerabilities and threats.</p>

<h2>The Problem</h2>

<p>New security vulnerabilities come up every day and keeping up with the latest updates can be tough. To take a more proactive response, we needed a way to get real-time updates of the latest vulnerabilities and identify which Cerner artifacts are affected.</p>

<p>But where can we get this data?</p>

<h2>Our Solution: Z3R0 D4Y</h2>

<p>We created the Z3R0 D4Y dashboard (shown below) to help solve this problem. The dashboard gives an overview of different CVEs and which products are affected.</p>

<p><img src="http://engineering.cerner.com/assets/2020-02-24-shipit-xvii/Z3R0_D4Y_DASHBOARD_summary_view.png"><br /></p>

<p>It then allows you to drill in and see details about the affected products. Below is an example of a test app to show a vulnerability.</p>

<p><img src="http://engineering.cerner.com/assets/2020-02-24-shipit-xvii/Z3R0_D4Y_DASHBOARD_detailed_view.png"><br /></p>

<h2>How It Works</h2>

<p>The project is comprised of two components: the backend engine and the dashboard site.</p>

<p>The engine subscribes to the National Vulnerability Database (<a href="https://nvd.nist.gov/">NVD</a>). The NVD provides a collection of <a href="https://nvd.nist.gov/vuln/data-feeds#JSON_FEED">data feeds</a> of published vulnerabilities which are updated approximately every two hours. The Z3R0 D4Y engine runs nightly to retrieve the list of most <a href="https://nvd.nist.gov/vuln/data-feeds#JSON_FEED">recently discovered CVEs</a>. The data then is parsed to identify details of the new CVEs and the list of vulnerable dependencies. Using the <a href="https://developer.github.com/v3/">GitHub API</a>,  the engine then checks all of Cerner&rsquo;s artifacts available in Github for matches based on that project’s dependency file. In Ruby, this would be the Gemfile.lock, for example. Finally, it publishes the findings to the Z3R0 D4Y dashboard.</p>

<p>The dashboard site is a simple Github page that displays all CVEs, their description, publish date, and affected artifacts. Its content is updated automatically nightly whenever the engine produces new data. The site also supports sorting and searching across the CVEs and Cerner artifacts data.</p>

<h2>Other ShipIt Day Winners</h2>

<h3>Second Place: nudgers</h3>

<p>The nudgers teamed up to create a ‘Nudge’ behavior-changing native iOS or Android application that can be quickly delivered to Cerner Associates to begin using. The app has users select a single behavior they’d like to improve upon (drink more water, less screen time, etc), they will manually enter their day’s total, and the app will begin ‘nudging’ them to make small changes based on their entries</p>

<div align="center">
  <table>
    <tr>
      <td align="center">
        <img class="center" src="http://engineering.cerner.com/assets/2020-02-24-shipit-xvii/runnerup1.jpg" width="600">
        <sub>Left to Right - Pat Walsh, Anna Luckey, John Moses, Justin Eddings</sub>
      </td>
    </tr>
  </table>
</div>


<h3>Third Place: Stop Trying To Make &lt;Cameras&gt; Happen</h3>

<p>This team worked on part two of a previous project they had worked on in a ShipIt Day, which is a virtual ICU Mobile Cart. In this hackathon they were able to implement device event listeners, encounter and location device association, conference calling integration, and data calls to the eHospital API.</p>

<div align="center">
  <table>
    <tr>
      <td align="center">
        <img class="center" src="http://engineering.cerner.com/assets/2020-02-24-shipit-xvii/runnerup2.jpg" width="600">
        <sub>Left to Right - Taylor Clay, Bilal Ahmad, Duncan Dufva</sub>
      </td>
    </tr>
  </table>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ShipIt Day XVI]]></title>
    <link href="http://engineering.cerner.com/blog/shipit-xvi/"/>
    <updated>2019-11-04T00:00:00-06:00</updated>
    <id>http://engineering.cerner.com/blog/shipit-xvi</id>
    <content type="html"><![CDATA[<p>Finishing our 16th occurrence of the series, our quarterly ShipIt Day hackathon invites the makers and innovators to come out and share new ways to think about our daily work here at Cerner. Whether it&rsquo;s experimenting with new features or improving our developer workflows, ShipIt Day gives our engineers a chance to try and learn new things. This ShipIt day in particular had some exciting projects that melded hardware and software. Here are the top teams.</p>

<h2>ShipIt Day XVI Winning Project</h2>

<div align="center">
  <table>
    <tr>
      <td align="center">
        <img class="center" src="http://engineering.cerner.com/assets/2019-11-04-shipit-xvi/shipit-xvi-1.png" width="600">
        <sub>Left to Right - Matt Boveri, David Crowder, Sam Livingston, Ian Kottman, Anthony Ross</sub>
      </td>
    </tr>
  </table>
</div>


<p>During this 24-hour event, the team created a capacity meter for Cerner’s DC/OS cluster. The focus was to map out the potential for failure within a DC/OS cluster based on hardware constraints: CPU / Memory / Disk space. Every hour the meter will sample the usage and display the currently most used resource. During the live demo seen below, CPU is the most utilized at just under 70%. Colorful LEDs were used to signify which hardware type is currently displayed. As the DC/OS cluster hits 95% a trigger will flash the red LED to alert that the cluster is nearly at capacity.</p>

<p>The code as well as additional notes on the project can be found in the public GitHub repository: <a href="https://github.com/mboveri/dcos_meter.">https://github.com/mboveri/dcos_meter.</a></p>

<p><img class="center" src="http://engineering.cerner.com/assets/2019-11-04-shipit-xvi/shipit-xvi-2.png" width="600"></p>

<h3>Meter Metrics</h3>

<ul>
<li>0 &ndash; 70% = Green</li>
<li>71 &ndash; 85% = Yellow</li>
<li>86% &ndash; 100% = Red</li>
<li>At 95%+ Red LED is illuminated</li>
</ul>


<h3>Raspberry Pi Configuration</h3>

<p><img class="center" src="http://engineering.cerner.com/assets/2019-11-04-shipit-xvi/shipit-xvi-3.png" width="600"></p>

<p><img class="center" src="http://engineering.cerner.com/assets/2019-11-04-shipit-xvi/shipit-xvi-4.png" width="600"></p>

<h2>Other ShipIt Day Winners</h2>

<p><strong>2nd Place- Sparkling Darlings:</strong> Aakash Pydi, Gunjan Kaphle, James Freeman, Jokongir Rikhsiboev, &amp; Cory Tenbarge</p>

<blockquote><p>In this project, the team worked on prototyping their team&rsquo;s user experience monitoring (UEM) jobs using <a href="https://spark.apache.org">Apache Spark</a>.</p>

<p>The UEM jobs currently run a series of giant aggregation summarizing SQL queries on our <a href="https://www.vertica.com/">Vertica</a> cluster. This leads to issues such as (i) significant lag in data availability, (ii) giant, unintuitive SQL challenging to support and debug, (iii) the addition of significant load to our Vertica cluster, (iv) the load added to Vertica being &lsquo;inefficient&rsquo;.  If these jobs were in Spark, it would be much more efficient, have near real time data availability, and be significantly easier to debug and support. It also could potentially leverage Spark libraries for machine learning and graph processing.</p>

<p>The more general goal is to set up an incremental development and adoption strategy, for a Spark powered aggregation, summarization, and analytics layer in the team&rsquo;s data architecture. This will be an immensely valuable tool in the team&rsquo;s arsenal.</p></blockquote>

<p><strong>3rd Place- Syug Looc:</strong> Eric Vue, Minhaz Abdullah, Zach Miller, Tarun Kolla, Sydne Anchutz &amp; Zachary Herridge</p>

<blockquote><p>This project focused on making the <a href="https://engineering.cerner.com/blog/devacademy-six-years-later/">Dev Academy</a> process more accessible to new hires at Cerner. While going through training, there is a very specific development process that associates must follow. The documentation for different parts of this process are currently hosted in multiple locations and sometimes contradicts itself. To fix this, the team developed a Chrome extension. The Chrome extension modeled a checklist to keep track of each step of the process per development task. It also cataloged the instructions and requirements for each step of the process and provided useful links to documentation to minimize errors. There were also quick links that allowed the user to jump between Jira/Crucible/GitHub/Jenkins for each task assigned to them. The use of this extension will make development in the Dev Academy much more efficient and reduce user error.</p></blockquote>

<p><strong>Best Presentation- Shippie-ki-yay Mother FHIR:</strong> Steven Goldberg, Ryan Neff, &amp; Jean Fernandez</p>

<p><strong>Best Team Name- ThunderCats:</strong> Chris Wheeler, Saranath Govindaraju, Vinayak Tare, &amp; Nageswara rao Nandigam</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Terra UI: A Health-Care Focused UI Component Library]]></title>
    <link href="http://engineering.cerner.com/blog/terra-ui/"/>
    <updated>2019-10-25T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/blog/terra-ui</id>
    <content type="html"><![CDATA[<div align="center">
  <table>
    <tr>
      <td align="center">
        <img src="http://engineering.cerner.com/assets/2019-10-24-terra-ui/terra-ui-1.png" width="200"><br>
      </td>
    </tr>
  </table>
</div>


<p>Back in 2013, like most other companies, Cerner was heavily invested in building user interfaces with Twitter Bootstrap. Around that time, <a href="https://daverupert.com/2013/04/responsive-deliverables/">Dave Rupert wrote about the concept of Responsive Deliverables</a> and touched on a key concept, creating “Tiny Bootstraps, for Every Client”. Along with this, Brad Frost had started promoting the idea of <a href="http://atomicdesign.bradfrost.com/">Atomic Design</a>. We saw a lot of value in these ideas and saw that we needed to evolve how we were developing UI at Cerner. We could see that Bootstrap was no longer meeting our needs and we felt we needed to start the process of building our own &ldquo;tiny bootstrap&rdquo;.</p>

<p>A small team was formed to begin work on a project named “Terra” to establish a component library for reusable UI patterns needed in our health care applications. We begin work building responsive, accessible, and internationalized components. The work was very similar to Twitter Bootstrap, but tailored to our specific needs at Cerner. We found great success and adoption with this new project but as tech evolved, we found our jQuery based UI components were showing a bit of age.</p>

<p>Fast-forward a few years, ReactJS and ES2015 had started to grow in popularity. At Cerner, we started to see more and more teams developing solutions with ReactJS. We could see that if we wanted to continue to provide consistent UI solutions that incorporated responsive design, accessibility, and internationalization concerns, we needed to evolve our component library.</p>

<p>We took this as an opportunity to build something new and share it with a wider audience. We decided to build a new version of our component library and base it on ReactJS. We also decided we wanted to make the project open source so anyone could help contribute to it. Today, we have a wide offering of UI components with a focus on health care applications in our open source component library, <a href="https://engineering.cerner.com/terra-ui/">Terra UI</a>.</p>

<h2>Who is Terra UI for?</h2>

<p>Terra UI is developed with the goal of helping consumers (including many app teams across Cerner, as well as external consumers in the open-source community) focus their efforts towards higher-level app concerns. We&rsquo;ve leveraged the expertise of our UX team to create attractive and intuitive UI components that provide a consistent look and feel backed by usability research. Additionally, we&rsquo;ve put a heavy focus into abstracting styling, accessibility, responsive design, cross-browser support, and internationalization considerations into our components so that consumers can get their projects up and running quickly. Cerner is utilizing Terra UI for healthcare web applications at scale with great success. We&rsquo;re proud to make it available to other via open source and we hope you&rsquo;ll check it out. Keep reading below to learn more about how you can consume and/or contribute to Terra UI.</p>

<h2>Terra UI Ecosystem</h2>

<p>The <a href="https://engineering.cerner.com/terra-ui/">Terra UI</a> ecosystem covers three types of components.</p>

<h3><a href="https://github.com/cerner/terra-core">Terra Core</a></h3>

<p>A repository containing a collection of common UI components ranging from buttons, to alerts, to form components, and more needed for building accessible, responsive, and internationalized applications.</p>

<h3><a href="https://github.com/cerner/terra-framework">Terra Framework</a></h3>

<p>A repository that contains higher-order and composable UI components that build on top of terra-core components that help with application layout concerns and progressive disclosures.</p>

<h3><a href="https://github.com/cerner/terra-clinical">Terra Clinical</a></h3>

<p>A repository that includes clinically focused UI components that build on top of terra-core.</p>

<h3>Additional Terra Packages</h3>

<p>Along with our component repositories, we provide webpack configuration and testing utilities via <a href="https://github.com/cerner/terra-toolkit">terra-toolkit</a>, linter configs for <a href="https://github.com/cerner/stylelint-config-terra">stylelint</a> and <a href="https://github.com/cerner/eslint-config-terra">eslint</a>, a component doc site webpack plugin via <a href="https://github.com/cerner/terra-dev-site">terra-dev-site</a>, and <a href="https://github.com/cerner/terra-aggregate-translations">tooling to help aggregate application translations</a>.</p>

<h2>Getting Started</h2>

<p>To get started, we recommend checking out <a href="https://engineering.cerner.com/terra-ui/getting-started/terra-ui/installing-components">our guide to installing your first Terra UI component</a>.</p>

<h2>Contributions</h2>

<p>We welcome contributions to <a href="https://engineering.cerner.com/terra-ui/">Terra UI</a>. Check our <a href="https://github.com/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+is%3Aissue+archived%3Afalse+repo%3Acerner%2Fduplicate-package-checker-webpack-plugin+repo%3Acerner%2Fterra-aggregate-translations+repo%3Acerner%2Fterra-clinical+repo%3Acerner%2Fterra-core+repo%3Acerner%2Fterra-dev-site+repo%3Acerner%2Fterra-enzyme-intl+repo%3Acerner%2Fterra-framework+repo%3Acerner%2Fterra-toolkit+repo%3Acerner%2Fgenerator-terra-module+repo%3Acerner%2Feslint-config-terra+repo%3Acerner%2Fstylelint-config-terra+repo%3Acerner%2Fbrowserslist-config-terra+repo%3Acerner%2Fterra-ui">Github issues</a> for ways you can get started with contributing, and be sure to <a href="https://engineering.cerner.com/terra-ui/contributing/terra-ui/prerequisites">check out our contribution guidelines</a>.</p>

<ul>
<li>NPM: <a href="https://www.npmjs.com/search?q=keywords%3ACerner%20Terra">https://www.npmjs.com/search?q=keywords%3ACerner%20Terra</a></li>
<li>Site: <a href="https://engineering.cerner.com/terra-ui/">https://engineering.cerner.com/terra-ui/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing F-Twelve, an Open Source Dev Console]]></title>
    <link href="http://engineering.cerner.com/blog/introducing-f-twelve-an-open-source-dev-console/"/>
    <updated>2019-10-08T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/blog/introducing-f-twelve-an-open-source-dev-console</id>
    <content type="html"><![CDATA[<p>Many modern web browsers come with tools that can help developers debug their websites. If you are using Google Chrome or Firefox for example, try pressing F12. A new panel should open containing various tools. These tools provide a look “under the hood” for the current page. Common tools include a JavaScript console, JavaScript debugger, DOM explorer, network request viewer, performance profile, local storage manager, and more.</p>

<p>Usually these tools are just a keypress away, but some environments don’t have browser tools. Alternate options exist such as Windows F12 chooser (which inspired the name F-Twelve) and Firebug Lite. These are nice but neither of them is a perfect solution. The former requires a certain version of Windows and the latter has not been updated in over 6 years. The kicker is, neither work inside an embedded IE frame. We ran into this issue while developing a <a href="https://fhir.cerner.com/">SMART on FHIR</a> application. Local development in a web browser would go smoothly but then we’d deploy to our test environment which used an embedded IE frame and it would not work. This was frustrating because it gave absolutely no indication of what the issue could be. It was typically either a blank white screen, or an eternal loading icon. The only way to troubleshoot was making a guess, adding alert calls, redeploying, and hoping it had something useful. This situation was occurring frequently and very inhibiting to development. We didn’t have access to F12, so we wrote our own JavaScript tool, F-Twelve.</p>

<p>The initial version was simply a div at the bottom of the page that would print window.onerror events and anything sent to console.log. The functionality was very limited, but it solved our problem of being able to identify errors. Since then we have cleaned up the UI and added functionality.</p>

<p>Current features include:</p>

<ul>
<li>Display console output (log, info, warn, error)</li>
<li>Evaluate expressions from console input</li>
<li>Hide or show the tool via keyboard shortcut</li>
</ul>


<p>For security reasons the console input does not execute arbitrary code, it can only parse and evaluate variables (e.g. window.location).</p>

<p>Potential features for the future include:</p>

<ul>
<li>DOM explorer</li>
<li>Network request viewer</li>
<li>Debugger</li>
<li>(Any other Dev Tools features)</li>
</ul>


<p>The project is still very young and the functionality that it has now is just the tip of the iceberg. The end goal is ultimately to provide all the functionality of modern browser’s Dev Tools without the need for a modern browser.</p>

<p>If you want to contribute or learn more about the tool, check out <a href="https://github.com/cerner/f-twelve">the code</a> or try the <a href="https://engineering.cerner.com/f-twelve/demo/">live demo</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Carbon Graphs: An Open Source Visualization API]]></title>
    <link href="http://engineering.cerner.com/blog/carbon-graphs-open-source-visualization-api/"/>
    <updated>2019-08-27T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/blog/carbon-graphs-open-source-visualization-api</id>
    <content type="html"><![CDATA[<p>We are pleased to announce Carbon Graphs as an open source code project!</p>

<p><em><a href="https://github.com/cerner/carbon-graphs">Carbon</a></em> is a lightweight, vanilla JavaScript visualization API built with <a href="https://d3js.org/">D3</a> that integrates well with any consumer&rsquo;s tech stack. It provides a variety of graph types that are <strong>framework agnostic</strong> and <strong>responsive</strong> out of the box.</p>

<div align="center">
  <table>
    <tr>
      <td align="center">
        <img src="http://engineering.cerner.com/assets/2019-08-27-carbon-graphs-open-source-visualization-api/carbon-1.png" width="200"><br>
      </td>
    </tr>
  </table>
</div>


<h1>Motivation</h1>

<p>Over the past few years, we have gradually updated our user interface to use modern JavaScript libraries such as <em>mithril.js</em> and <em>React</em>. Our components needed a graphing solution that would work well with our current framework while providing visualizations based on leading industry solutions.</p>

<p>We did an extensive audit of various Cerner solutions already available, the graph types they were using, and the libraries used to plot the data. We discovered that most solutions had graph implementations baked into their product such that they were modifying or extending open source libraries in an effort to support Cerner&rsquo;s unique clinical and accessibility needs. These implementations, however, could not be broadly reused. As such, we saw an opportunity to collaborate with our User Experience team to create an attractive, modern, and flexible graphing solution that not only would meet Cerner&rsquo;s design standards, but that could be open sourced to give back to the engineering community for their own graphing needs.</p>

<h1>Graph Types</h1>

<p>With <em>Carbon</em>, you get:</p>

<ul>
<li><a href="https://engineering.cerner.com/carbon-graphs/#/line/simple">Line graph</a></li>
<li><a href="https://engineering.cerner.com/carbon-graphs/#/multi-line/simple">Multiline graph</a></li>
<li><a href="https://engineering.cerner.com/carbon-graphs/#/spline/simple">Spline Line graph</a></li>
<li><a href="https://engineering.cerner.com/carbon-graphs/#/non-contiguous-line/simple">Non-Contiguous Line graph</a></li>
<li><a href="https://engineering.cerner.com/carbon-graphs/#/paired-result/simple">Paired Result graph</a></li>
<li><a href="https://engineering.cerner.com/carbon-graphs/#/timeline/simple">Timeline graph</a></li>
<li><a href="https://engineering.cerner.com/carbon-graphs/#/bar/simple">Bar graph</a></li>
<li><a href="https://engineering.cerner.com/carbon-graphs/#/pie/simple">Pie chart</a></li>
<li><a href="https://engineering.cerner.com/carbon-graphs/#/gantt/simple">Gantt chart</a></li>
</ul>


<p>Graphs come with following settings that be customized:</p>

<ul>
<li>Legend</li>
<li>Labels</li>
<li>Grid lines (Vertical and Horizontal)</li>
<li>Axes (X and Y, or Y2)</li>
<li>Regions (Horizontal only)</li>
</ul>


<p><em>Carbon</em> also supports functionalities that are not provided with popular open source libraries such as:</p>

<ul>
<li>Support for custom SVG shapes as data points</li>
<li>Support for different standard shapes (dark or light) as data points</li>
<li>Locale support for axes ticks</li>
</ul>


<h1>Drawing a Line Graph</h1>

<p>Let’s see how easy it can be to get started!</p>

<p>To create a line graph, first create an HTML element that will hold the graph. Here, we are specifying a main element with an <strong>id</strong> of <strong>root</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;main</span> <span class="na">id=</span><span class="s">&quot;root&quot;</span><span class="nt">&gt;&lt;/main&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>From there, we will initialize a JavaScript object that configures various aspects of the graph, including where the graph will be drawn and how the axes should appear.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">graphConfiguration</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">bindTo</span><span class="o">:</span> <span class="s2">&quot;#root&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">axis</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">x</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">type</span><span class="o">:</span> <span class="nx">Carbon</span><span class="p">.</span><span class="nx">helpers</span><span class="p">.</span><span class="nx">AXIS_TYPE</span><span class="p">.</span><span class="nx">TIME_SERIES</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">label</span><span class="o">:</span> <span class="s2">&quot;Datetime&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">lowerLimit</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2016</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">0</span><span class="p">).</span><span class="nx">toISOString</span><span class="p">(),</span>
</span><span class='line'>            <span class="nx">upperLimit</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2016</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">59</span><span class="p">).</span><span class="nx">toISOString</span><span class="p">()</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">y</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">label</span><span class="o">:</span> <span class="s2">&quot;Temperature (degF)&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">lowerLimit</span><span class="o">:</span> <span class="mi">90</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">upperLimit</span><span class="o">:</span> <span class="mi">106</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, we’ll configure the dataset we want to plot.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">dataset</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">key</span><span class="o">:</span> <span class="s2">&quot;uid_1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">label</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">display</span><span class="o">:</span> <span class="s2">&quot;Oral Temperature&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">shape</span><span class="o">:</span> <span class="nx">Carbon</span><span class="p">.</span><span class="nx">helpers</span><span class="p">.</span><span class="nx">SHAPES</span><span class="p">.</span><span class="nx">RHOMBUS</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">color</span><span class="o">:</span> <span class="nx">Carbon</span><span class="p">.</span><span class="nx">helpers</span><span class="p">.</span><span class="nx">COLORS</span><span class="p">.</span><span class="nx">BLUE</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">values</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>            <span class="nx">x</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2016</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">).</span><span class="nx">toISOString</span><span class="p">(),</span>
</span><span class='line'>            <span class="nx">y</span><span class="o">:</span> <span class="mf">96.5</span>
</span><span class='line'>       <span class="p">},</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>            <span class="nx">x</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2016</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">15</span><span class="p">).</span><span class="nx">toISOString</span><span class="p">(),</span>
</span><span class='line'>            <span class="nx">y</span><span class="o">:</span> <span class="mf">98.7</span>
</span><span class='line'>       <span class="p">},</span>
</span><span class='line'>       <span class="p">{</span>
</span><span class='line'>            <span class="nx">x</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2016</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">).</span><span class="nx">toISOString</span><span class="p">(),</span>
</span><span class='line'>            <span class="nx">y</span><span class="o">:</span> <span class="mf">97.4</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And to wrap it all up, we’ll call <strong><em>loadContent</em></strong> to draw the content.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">graph</span> <span class="o">=</span> <span class="nx">Carbon</span><span class="p">.</span><span class="nx">api</span><span class="p">.</span><span class="nx">graph</span><span class="p">(</span><span class="nx">graphConfiguration</span><span class="p">);</span>
</span><span class='line'><span class="nx">graph</span><span class="p">.</span><span class="nx">loadContent</span><span class="p">(</span><span class="nx">Carbon</span><span class="p">.</span><span class="nx">api</span><span class="p">.</span><span class="nx">line</span><span class="p">(</span><span class="nx">dataset</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>That’s it!</p>

<div align="center">
  <table>
    <tr>
      <td align="center">
        <img src="http://engineering.cerner.com/assets/2019-08-27-carbon-graphs-open-source-visualization-api/carbon-2.png" width="600"><br>
      </td>
    </tr>
  </table>
</div>


<h1>Contribute!</h1>

<p>We are continuously working on improving <em>Carbon</em> to support our ever-increasing clinical needs! Help us make it better by reporting issues using the GitHub <a href="https://github.com/cerner/carbon-graphs/issues">issues</a> queue or feel free to contribute with <a href="https://github.com/cerner/carbon-graphs/pulls">pull requests</a>.</p>

<p>NPM: <a href="https://www.npmjs.com/package/@cerner/carbon-graphs">https://www.npmjs.com/package/@cerner/carbon-graphs</a></p>

<p>Site: <a href="https://engineering.cerner.com/carbon-graphs/">https://engineering.cerner.com/carbon-graphs/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CCL Unit and CCL Testing Released to Open Source]]></title>
    <link href="http://engineering.cerner.com/blog/ccl-unit-and-ccl-testing-released-to-open-source/"/>
    <updated>2019-08-09T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/blog/ccl-unit-and-ccl-testing-released-to-open-source</id>
    <content type="html"><![CDATA[<p>We are pleased to announce the release of <a href="https://github.com/cerner/cclunit-framework">CCL Unit</a> and <a href="https://github.com/cerner/ccl-testing">CCL Testing</a> as open source code projects,
as well as the release of the CCL Testing plugin artifacts to <a href="https://repo.maven.apache.org/maven2/com/cerner/ccl">Maven Central</a>.</p>

<p>Cerner Command Language (CCL) is a database query and scripting language used with Cerner Millennium databases. CCL Unit is a unit testing framework for CCL written in CCL. The CCL Testing plugins generate reports for viewing the results of CCL Unit tests and static analyses of CCL programs and for generating code documentation from comments in the source code for CCL programs. These tools were created to help developers improve the quality of their CCL programs.</p>

<p>We have released the code for these tools to open source to facilitate frictionless contributions of enhancements, corrections, and documentation improvements by the CCL developer community at large and to allow CCL developers to opt in for automatic notifications about version updates by subscribing to the CCL Unit and CCL Testing source repositories. We have released the CCL Testing plugins to Maven Central to eliminate the need to configure the location and access credentials for a proprietary plugin repository in order to use them.</p>

<p>We invite you to visit the change log of each repository to see the many improvements made since the original releases. Most notably:</p>

<ul>
<li>CCL Unit tests can now be executed directly from a CCL command prompt. A Maven installation is not required.</li>
<li>CCL Unit now sports a mocking framework which makes it a snap to create and access mock database tables seeded with test specific data without affecting the integrity of any existing database data.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevAcademy Six Years Later]]></title>
    <link href="http://engineering.cerner.com/blog/devacademy-six-years-later/"/>
    <updated>2019-06-14T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/blog/devacademy-six-years-later</id>
    <content type="html"><![CDATA[<p>Cerner hires a lot of software engineers.  In fact, we have hired over 1,600 engineers since our early career onboarding program, DevAcademy, went live almost six years ago.  In particular, we use DevAcademy to onboard early career software engineers.</p>

<p>DevAcademy is a three part onboarding program built by engineers for engineers.  The first part of DevAcademy is DevEssentials which covers a lot of the basics new engineers need to know about development ecosystems in our development environment.  After spending a few days hearing from the software engineers who teach DevEssentials, our new hires move into DevCenter.  DevCenter is a performance based, hands-on training opportunity.  Engineers dig into real projects on small teams with the help of experienced mentors from teams across Cerner’s tech stack.  They work through their projects, adding new functionality to existing applications, and honing their craft with the help of the full-time engineering instructors who keep DevAcademy running as well as their mentors.  Over 700 engineers have participated as mentors providing feedback in code reviews, office hours, and scrum on more than 120 different projects.  One engineer said of DevAcademy, “I was able to (and encouraged to) work independently, make decisions and find solutions without always having to seek approval for them. I also got feedback when those decisions turned out to be bad, so I could make better decisions in the future.”  As soon as new engineers are writing, testing, and documenting their code in a way that meets the criteria Cerner has established for new hires, they go to teams across all areas of the company.</p>

<div align="center">
  <table>
    <tr>
      <td align="center">
        <img src="http://engineering.cerner.com/assets/2019-06-14-devacademy-six-years-later/devacademy-1.png" width="600"><br>
        <sub>New engineers working on their projects in the DevCenter</sub>
      </td>
    </tr>
  </table>
</div>


<p>Engineering managers report that DevAcademy engineers are able to make meaningful contributions to their new teams very quickly, usually within two months. Before DevAcademy existed, it would often take six months before a new engineer could provide valuable contributions to their codebase. Engineers go to their new teams already equipped with knowledge of the process, tools, and best practices that are standard across engineering teams at Cerner.</p>

<div align="center">
  <table>
    <tr>
      <td align="center">
        <img src="http://engineering.cerner.com/assets/2019-06-14-devacademy-six-years-later/devacademy-2.png" width="600"><br>
        <sub>Engineers in training participating in their morning stand-up meeting</sub>
      </td>
    </tr>
  </table>
</div>


<p>After joining their teams, new software engineers very quickly dive into the work, learning the architecture and tooling as they go.  When they do need additional training to help level-up their skills, they utilize the third part of DevAcademy, DevElectives.  DevElectives focus on practices and tools engineers have identified as needs for their teams and architectures.  Like DevEssentials, DevElectives are taught by engineers and provide opportunities to hear from more experienced people while digging into new technology.</p>

<p>In addition to providing an optimized orientation to writing code at Cerner, DevAcademy helps people cultivate relationships and networks that they will utilize throughout their careers.  Many groups continue to meet regularly to discuss the work they are doing and get pointers from their colleagues.  One Cerner associate said, “When I first joined Cerner, I had just moved and was alone in a new city. I was apprehensive, but excited. I had no idea that DevAcademy would be so formative to the friendships I created and networks I joined. DevAcademy was where I met my friends, some of whom I can already tell will be lifelong, where I met mentors who became the start of my network, and became inspired to be a mentor to continue expanding my network.”</p>

<div align="center">
  <table>
    <tr>
      <td align="center">
        <img src="http://engineering.cerner.com/assets/2019-06-14-devacademy-six-years-later/devacademy-3.png" width="600"><br>
        <sub>A mentor helps a new associate set up his code review</sub>
      </td>
    </tr>
  </table>
</div>


<p>In many ways, DevAcademy has become a staple of engineering at Cerner.  It is where engineers have a safe space to learn and grow as they begin their career.  It has become a proving ground for exploring new technologies and possibilities, and it gives more advanced engineers a way to improve their leadership skills.  More importantly, it helps Cerner shape its engineering culture; focusing on the future state of engineering and cultivating an environment in which engineers are prepared to join a team and spread the knowledge they have gained during training to improve engineering as a whole.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pi Day 2019: Build Your Own Alarm System]]></title>
    <link href="http://engineering.cerner.com/blog/pi-day-2019-build-your-own-alarm-system/"/>
    <updated>2019-03-14T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/blog/pi-day-2019-build-your-own-alarm-system</id>
    <content type="html"><![CDATA[<p>At Cerner Engineering, we love to celebrate <a href="https://en.wikipedia.org/wiki/Pi_Day">Pi Day</a>. This day is not only a fun time to enjoy eating pie and reflecting on mathematical properties, but we also share big announcements internally for our developers conference, <a href="https://engineering.cerner.com/blog/devcon-recap/">DevCon</a>.</p>

<div align="center"><blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Drew a crowd to celebrate Pi Day this afternoon with snacks, lightning talks, and our DevCon 2018 theme reveal! <a href="https://twitter.com/hashtag/314day?src=hash&amp;ref_src=twsrc%5Etfw">#314day</a> <a href="https://twitter.com/hashtag/cernerdevcon?src=hash&amp;ref_src=twsrc%5Etfw">#cernerdevcon</a> <a href="https://t.co/wyy5eLKHVl">pic.twitter.com/wyy5eLKHVl</a></p>&mdash; Cerner Engineering (@CernerEng) <a href="https://twitter.com/CernerEng/status/974023542504411136?ref_src=twsrc%5Etfw">March 14, 2018</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>For this post, we thought it would be fun to share a simple example of how you can hook your existing monitoring system to a physical alarm system powered by a <a href="https://www.raspberrypi.org/">Raspberry Pi</a>. This alarm will be a red spinning light, the universal symbol of &ldquo;something is going wrong.&rdquo; We will build a program that will integrate with New Relic to determine if there are issues in our environment. If there are any issues, it will trigger the alarm and your monitoring system will come alive!</p>

<h2>Parts List</h2>

<ul>
<li><a href="https://www.adafruit.com/product/825">Jumper wires</a> &ndash; Wires that we will use to trigger the switch from your GPIO pins.</li>
<li><a href="https://www.amazon.com/Rhode-Island-Novelty-Police-Beacon/dp/B0011CZV5A">Alarm light that is AC powered</a> &ndash; There are several different types of fun alarm or party lights you could use. The important characteristic that we are seeking is an AC powered light, as we will use this to control its state. Many lights you will find are battery powered, which will not work for this example.</li>
<li><a href="https://www.adafruit.com/product/2935">PowerSwitch Tail or alternative</a> &ndash; I have had this setup for quite some time, so I still have a PowerSwitch Tail, but looks like they may not be available by all providers. You can get other alternatives out there, where you can control an AC power switch safely through GPIO interactions.</li>
<li><a href="https://www.raspberrypi.org">Raspberry Pi</a> &ndash; I have an older model, but anything with a powered ethernet connection works well (ex. Raspberry Pi 3 Model B+), as we will be making remote HTTPS calls. If this is your first time getting a Raspberry Pi, there are great kits that include your power adapter and SD card (as you will need that too).</li>
<li>RJ45 ethernet cable <em>(optional)</em> &ndash; We won’t leverage WiFi for this example, and simply use a ethernet cable for maintaining a network connection for the Raspberry Pi. You don’t need this if you already know how you plan to connect your Raspberry Pi to your existing network.</li>
</ul>


<h2>The Alarm</h2>

<p>Once you have this setup, we are going to use the Raspberry Pi to control your AC output by communicating to the PowerSwitch Tail through our <a href="https://www.raspberrypi.org/documentation/usage/gpio/">GPIO pins</a>. A <a href="https://golang.org/">Go program</a> will control the logic of flexing the alarm on or off by polling a monitoring system: <a href="https://newrelic.com/">New Relic</a>. New Relic is a real-time monitoring platform that gives you powerful insights about the applications you are operating. One of the features of New Relic, is that you can build alerts about different indicators of your application (ex. high memory utilization of a service). These can be rolled up to an &ldquo;incident&rdquo; concept, when you have <a href="https://docs.newrelic.com/docs/alerts/new-relic-alerts/configuring-alert-policies/specify-when-new-relic-creates-incidents">a violation on an alert condition</a>. For this physical alarm, it made sense to pair it with this concept that we use from New Relic. Therefore, if you build something that would trigger human engagement with your alerts (like an incident), this alarm can generically pick these up, without you having to manage anything else.</p>

<h2>The Code</h2>

<p>Here is the code snippet of what we will implement. It is a Go program, which will interact with the GPIO pins using <a href="https://github.com/stianeikeland/go-rpio">go-rpio</a>. It will essentially run in a loop, and poll New Relic’s Alert API every minute. To ensure we aren’t running the alarm in the after-hours, we will also flex when this can trigger (ex. Mon &ndash; Friday, 9 &ndash; 5 PM).</p>

<p>First, we will build something that can invoke the <a href="https://rpm.newrelic.com/api/explore/alerts_incidents/list">New Relic Alerts API</a>. This will offer a single function (<code>hasOpenIncidents</code>) that will dictate if there are any open incidents when checking with New Relic.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// New Relic Incident API type (just using including two of the fields as an example)</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">Incident</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Id</span>       <span class="kt">int</span>   <span class="s">`json:&quot;id&quot;`</span>
</span><span class='line'>  <span class="nx">OpenedAt</span> <span class="kt">int64</span> <span class="s">`json:&quot;opened_at&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// New Relic Incident API response type, which we will assess on having any items in the array for the alarm.</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">IncidentsResponse</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Incidents</span> <span class="p">[]</span><span class="nx">Incident</span> <span class="s">`json:&quot;incidents&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Documented here: https://rpm.newrelic.com/api/explore/alerts_incidents/list</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">hasOpenIncidents</span><span class="p">(</span><span class="nx">apiKey</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">url</span> <span class="o">:=</span> <span class="s">&quot;https://api.newrelic.com/v2/alerts_incidents.json?only_open=true&quot;</span>
</span><span class='line'>  <span class="nx">spaceClient</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Client</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Timeout</span><span class="p">:</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="o">*</span> <span class="mi">15</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">req</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">NewRequest</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">MethodGet</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">req</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;X-Api-Key&quot;</span><span class="p">,</span> <span class="nx">apiKey</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">res</span><span class="p">,</span> <span class="nx">getErr</span> <span class="o">:=</span> <span class="nx">spaceClient</span><span class="p">.</span><span class="nx">Do</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// If there is a failure to calling New Relic (ex. timeout), simply logging and returning back</span>
</span><span class='line'>  <span class="c1">// for a later retry</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">getErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Failed to get a response: %s&quot;</span><span class="p">,</span> <span class="nx">getErr</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">incidentsResponse</span> <span class="o">:=</span> <span class="nx">IncidentsResponse</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">jsonError</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewDecoder</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">Body</span><span class="p">).</span><span class="nx">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">incidentsResponse</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">jsonError</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">jsonError</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="nx">incidentsResponse</span><span class="p">.</span><span class="nx">Incidents</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We will then manage the GPIO pin state in a simple loop which will check to see if there are any open incidents. If so, it will set the pin to <em>High</em>, which will trigger the light switch. Otherwise it will set it to low. We will also include a handler for setting the pin to low when we terminate the application (ex. via a SIGTERM). Example of managing the state:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'>   <span class="c1">// If there are any open New Relic incidents, set the pin to high</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">hasOpenIncidents</span><span class="p">(</span><span class="nx">apiKey</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Print</span><span class="p">(</span><span class="s">&quot;Incidents detected, setting alarm.&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">pin</span><span class="p">.</span><span class="nx">High</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Print</span><span class="p">(</span><span class="s">&quot;No incidents detected.&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">pin</span><span class="p">.</span><span class="nx">Low</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you put it all together, the full picture of code looks like this (<code>alarm.go</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/spf13/viper&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/stianeikeland/go-rpio&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;net/http&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;os/signal&quot;</span>
</span><span class='line'>  <span class="s">&quot;syscall&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// New Relic Incident API type (just using including two of the fields as an example)</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">Incident</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Id</span>       <span class="kt">int</span>   <span class="s">`json:&quot;id&quot;`</span>
</span><span class='line'>  <span class="nx">OpenedAt</span> <span class="kt">int64</span> <span class="s">`json:&quot;opened_at&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// New Relic Incident API response type, which we will assess on having any items in the array for the alarm.</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">IncidentsResponse</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Incidents</span> <span class="p">[]</span><span class="nx">Incident</span> <span class="s">`json:&quot;incidents&quot;`</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Documented here: https://rpm.newrelic.com/api/explore/alerts_incidents/list</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">hasOpenIncidents</span><span class="p">(</span><span class="nx">apiKey</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">url</span> <span class="o">:=</span> <span class="s">&quot;https://api.newrelic.com/v2/alerts_incidents.json?only_open=true&quot;</span>
</span><span class='line'>  <span class="nx">spaceClient</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Client</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">Timeout</span><span class="p">:</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="o">*</span> <span class="mi">15</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">req</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">NewRequest</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">MethodGet</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">req</span><span class="p">.</span><span class="nx">Header</span><span class="p">.</span><span class="nx">Set</span><span class="p">(</span><span class="s">&quot;X-Api-Key&quot;</span><span class="p">,</span> <span class="nx">apiKey</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">res</span><span class="p">,</span> <span class="nx">getErr</span> <span class="o">:=</span> <span class="nx">spaceClient</span><span class="p">.</span><span class="nx">Do</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// If there is a failure to calling New Relic (ex. timeout), simply logging and returning back</span>
</span><span class='line'>  <span class="c1">// for a later retry</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">getErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Failed to get a response: %s&quot;</span><span class="p">,</span> <span class="nx">getErr</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">false</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">incidentsResponse</span> <span class="o">:=</span> <span class="nx">IncidentsResponse</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">jsonError</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewDecoder</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">Body</span><span class="p">).</span><span class="nx">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">incidentsResponse</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">jsonError</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">jsonError</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="nx">incidentsResponse</span><span class="p">.</span><span class="nx">Incidents</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Simple handler to set the pin to a LOW signal when terminating the application</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">closeHandler</span><span class="p">(</span><span class="nx">pin</span> <span class="nx">rpio</span><span class="p">.</span><span class="nx">Pin</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">c</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">signal</span><span class="p">.</span><span class="nx">Notify</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Interrupt</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span><span class='line'>  <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">&lt;-</span><span class="nx">c</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Print</span><span class="p">(</span><span class="s">&quot;SIGTERM detected, setting pin off&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">pin</span><span class="p">.</span><span class="nx">Low</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">os</span><span class="p">.</span><span class="nx">Exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Load configuration</span>
</span><span class='line'>  <span class="nx">viper</span><span class="p">.</span><span class="nx">SetConfigName</span><span class="p">(</span><span class="s">&quot;config&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">viper</span><span class="p">.</span><span class="nx">AddConfigPath</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">configErr</span> <span class="o">:=</span> <span class="nx">viper</span><span class="p">.</span><span class="nx">ReadInConfig</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">configErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Panicf</span><span class="p">(</span><span class="s">&quot;Fatal error config file: %s \n&quot;</span><span class="p">,</span> <span class="nx">configErr</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">apiKey</span> <span class="o">:=</span> <span class="nx">viper</span><span class="p">.</span><span class="nx">GetString</span><span class="p">(</span><span class="s">&quot;new_relic.api_key&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Setup GPIO pin</span>
</span><span class='line'>  <span class="nx">log</span><span class="p">.</span><span class="nx">Print</span><span class="p">(</span><span class="s">&quot;Opening GPIO&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rpio</span><span class="p">.</span><span class="nx">Open</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Panic</span><span class="p">(</span><span class="s">&quot;Unable to open GPIO&quot;</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">Error</span><span class="p">())</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">rpio</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Mapping to BCM2835 pin 18, which is the physical 12 pin. For more information about pin mapping, you can see</span>
</span><span class='line'>  <span class="c1">// how these are being mapped: https://github.com/stianeikeland/go-rpio/blob/v4.4.0/rpio.go#L35-L59</span>
</span><span class='line'>  <span class="nx">pin</span> <span class="o">:=</span> <span class="nx">rpio</span><span class="p">.</span><span class="nx">Pin</span><span class="p">(</span><span class="mi">18</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">pin</span><span class="p">.</span><span class="nx">Output</span><span class="p">()</span>
</span><span class='line'>  <span class="nx">closeHandler</span><span class="p">(</span><span class="nx">pin</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// If it is after-hours, don&#39;t worry about triggering the alarm (trigger during: Mon - Fri, 9 - 5)</span>
</span><span class='line'>      <span class="nx">t</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">()</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">Weekday</span><span class="p">()</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nx">t</span><span class="p">.</span><span class="nx">Weekday</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">Hour</span><span class="p">()</span> <span class="p">&lt;</span> <span class="mi">9</span> <span class="o">||</span> <span class="nx">t</span><span class="p">.</span><span class="nx">Hour</span><span class="p">()</span> <span class="p">&gt;</span> <span class="mi">17</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">pin</span><span class="p">.</span><span class="nx">Low</span><span class="p">()</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Print</span><span class="p">(</span><span class="s">&quot;After hours, sleeping for 5 minutes before continuing...&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">5</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Minute</span><span class="p">)</span>
</span><span class='line'>          <span class="k">continue</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// If there are any open New Relic incidents, set the pin to high</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">hasOpenIncidents</span><span class="p">(</span><span class="nx">apiKey</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Print</span><span class="p">(</span><span class="s">&quot;Incidents detected, setting alarm.&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">pin</span><span class="p">.</span><span class="nx">High</span><span class="p">()</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">log</span><span class="p">.</span><span class="nx">Print</span><span class="p">(</span><span class="s">&quot;No incidents detected.&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">pin</span><span class="p">.</span><span class="nx">Low</span><span class="p">()</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">time</span><span class="p">.</span><span class="nx">Sleep</span><span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Minute</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Building</h3>

<p>For my example, I have this in a <code>alarm.go</code> file within my <code>nr-pi-alarm</code> directory. I then issue the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>env <span class="nv">GOOS</span><span class="o">=</span>linux <span class="nv">GOARCH</span><span class="o">=</span>arm <span class="nv">GOARM</span><span class="o">=</span>5 go build
</span></code></pre></td></tr></table></div></figure>


<p>This will produce a <code>nr-pi-alarm</code> you can then transfer to your Raspberry Pi for execution. One example of doing this is with <code>scp</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Will transfer it to the alarm directory for the pi user on the Raspberry Pi</span>
</span><span class='line'>scp nr-pi-alarm pi@INSERT_YOUR_RASPBERRY_PI_IP_ADDRESS:alarm
</span></code></pre></td></tr></table></div></figure>


<h3>Wiring it up</h3>

<p>For this example, we are using the physical pins #12 and #14 (GPIO18 and GND). We will use our jumper wires to then hook this to the AC switch:</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2019-03-14-pi-day-2019-build-your-own-alarm-system/pi-alarm-gpio.jpg" width="600"></p>

<p><img class="center" src="http://engineering.cerner.com/assets/2019-03-14-pi-day-2019-build-your-own-alarm-system/pi-alarm-switch.jpg" width="600"></p>

<p>You will then hook your alarm light to the AC switch (PowerSwitch Tail). If the alarm light has its own on/off switch, turn it to on, as we don&rsquo;t want this manual switch to block what our Raspberry Pi is going to control based on the flow of power.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2019-03-14-pi-day-2019-build-your-own-alarm-system/pi-alarm-setup.jpg" width="600"></p>

<h3>Run it</h3>

<p>After you have transferred the build to your pi, you can then configure the alarm to use your New Relic account. This is achieved by creating a <code>config.yml</code> file in your <code>alarm</code> directory which currently hosts the <code>nr-pi-alarm</code> program (set to <code>600</code> for file permissions):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">new_relic</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">api_key</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">INSERT_NEW_RELIC_API_KEY_HERE</span>
</span></code></pre></td></tr></table></div></figure>


<p>After you have configured it, simply invoke this to run the alarm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./nr-pi-alarm
</span><span class='line'>2019/03/14 10:04:12 Opening GPIO
</span><span class='line'>2019/03/14 10:04:26 Incidents detected, setting alarm.
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://engineering.cerner.com/assets/2019-03-14-pi-day-2019-build-your-own-alarm-system/alarm.gif"></p>

<h2>Happy Pi Day</h2>

<p>We hope you are having a great Pi Day and maybe this example will give you other ideas of what you can build to bring your systems alive. 😀</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ShipIt XIV]]></title>
    <link href="http://engineering.cerner.com/blog/shipit-xiv/"/>
    <updated>2019-03-08T00:00:00-06:00</updated>
    <id>http://engineering.cerner.com/blog/shipit-xiv</id>
    <content type="html"><![CDATA[<p>It is winter time in Kansas City, which also included our fourteenth edition of ShipIt, our routine hackathon competition we host at Cerner Engineering. Although the snowy weather may have kept participants between the warm walls of our Innovations Campus, the winter storm did not disturb the initiative and enthusiasm of the fourteen participating teams.
Check out the video below to hear from ShipIt Day participants and supporters as to why ShipIt Day has become an engineering-wide program that supports Cerner’s development culture.</p>

<div align="center">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/uNo5666TPaA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>


<h2>The Winning ShipIt Day XIV Teams</h2>

<p>1st Place- Bravo Avocado (Max Schroeder, Jacob Zimmermann, Jan Monterrubio)</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2019-03-08-shipit-xiv/shipit-xiv-1.jpg" width="600"></p>

<blockquote><p>“We created &ldquo;HCCgle&rdquo; (pronounced &ldquo;WHO-gull&rdquo;), a search application for looking up HCC information by <a href="https://en.wikipedia.org/wiki/ICD-10">ICD-10</a> diagnosis code (e.g. &ndash; &ldquo;E13.11&rdquo;) or by term (e.g. &ndash; &ldquo;Diabetes mellitus&rdquo;), including across physician-friendly terminologies like <a href="https://en.wikipedia.org/wiki/Intelligent_Medical_Objects">IMO</a> and <a href="https://en.wikipedia.org/wiki/Systematized_Nomenclature_of_Medicine">SNOMED</a> CT. The app presented which HCC categories the requested term belongs to (if any) and shows how its categorization in the HCC specification has changed over time between revisions. This was created using Java, React, and DropWizard as well as an Oracle database. Our primary use case for this project is for aiding support troubleshooting, as there was not a good way to find the HCC codes used in production.” – Bravo Avocado</p></blockquote>

<p>2nd Place- Risky Salt (Kevin Eilers, Ryan Rickard, Pepper Pancoast)</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2019-03-08-shipit-xiv/shipit-xiv-2.jpg" width="600"></p>

<blockquote><p>“We created an innovation/strategic roadmap prototype for Cerner&rsquo;s clients that shows past, current and future projects, along with crucial data points for each. The data was directly from a Microsoft SQL server that houses all of our project management data, and the application was built on Ruby on Rails and React.”– Risky Salt</p></blockquote>

<p>3rd Place- All the Data (Taylor Clay, Bilal Ahmad, Eric Ringle)</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2019-03-08-shipit-xiv/shipit-xiv-3.jpg" width="600"></p>

<blockquote><p>“Our team worked on a prototype of a real-time flow sheet, that was a customizable data visualization tool for patient device data. In the real world, this would be used to view trends in a patient’s health to proactively identify risks. The goal of this project was to build a prototype UI support a dense flow sheet and graphical view of critical care data. This would include Cerner <a href="https://www.cerner.com/pages/careaware">CareAware iBus</a> and <a href="https://www.cerner.com/solutions/health-systems">Cerner Millennium</a> data sources, as well as, understand complexity to better gauge what functions to bring into the solution. This was created using <a href="https://nodered.org/">Node-RED</a> (created a mock service that published data to the app) and React (the application UI).” – All the Data</p></blockquote>

<h2>People’s Choice Award Winners</h2>

<div align="center">
  <table>
    <tr>
      <td align="center">
        <img src="http://engineering.cerner.com/assets/2019-03-08-shipit-xiv/shipit-xiv-4.jpg" width="400"><br>
        <sub>Best Team Name - :(){:|:&};:<br> (Ian Kottman, Sam Livingston, Paul Dennis, Bobby Ryterski, Anthony Ross)</sub>
      </td>
      <td align="center">
        <img src="http://engineering.cerner.com/assets/2019-03-08-shipit-xiv/shipit-xiv-5.jpg" width="400"><br>
        <sub>Best Presentation - Ship O&#8217;Holics <br>(Sowmya Mathukumalli, Shrutha Kashyap, Yasho Jhamvar, Tejendra Velaga)</sub>
      </td>
    </tr>
  </table>
</div>


<p></p>

<p>Thank you to our talented judges Ben York, Adilson Ribeiro, and Scott Julius. Thank you to <a href="https://twitter.com/kylesharpe">Kyle Harper</a> for taking awesome pictures throughout our event.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevCon: A Tech Conference for Engineering, by Engineering]]></title>
    <link href="http://engineering.cerner.com/blog/devcon-recap/"/>
    <updated>2019-02-08T00:00:00-06:00</updated>
    <id>http://engineering.cerner.com/blog/devcon-recap</id>
    <content type="html"><![CDATA[<p>In 2010 a group of Cerner engineers went to their leadership with an idea: a Cerner tech conference just for the internal development community, built and run from the ground up. The idea for a conference like this had been brewing at Cerner for several years. It was seen as an opportunity to create a large scale, sharing and learning experience for associates in Cerner&rsquo;s technical workforces.</p>

<p>From the beginning, buy-in from leadership was essential for the conference to succeed. In their original pitch, these engineers demonstrated how DevCon would create opportunities for knowledge sharing, networking, and collapsing long standing organizational silos by placing the teaching and learning opportunities into associates’ hands. The idea of associates getting together to share experiences  and lessons learned around topics they were genuinely passionate about resonated right away as an intrinsic benefit to the company. Leadership’s support combined with the efforts of associates driving the conference forward year to year have pushed DevCon to an entirely new level since 2011.</p>

<p>The first DevCon had 600 attendees, all in Kansas City; now DevCon spans three locations &ndash; Kansas City, MO; Malvern, PA; and Bangalore, India &ndash; and in 2018 hosted over 7,500 attendees.  The three experiences included 25 corporate sponsors, over 150 unique, associate-led sessions, and 5 keynote sessions delivered by industry thought leaders. Each year involves a new quirky visual theme, ranging from 8-bit vintage video games to large film and book franchises like Star Wars and Marvel Comics.</p>

<p>In addition to the keynotes and breakout sessions, attendees are given the opportunity to mingle and network with coworkers through trivia night, a social, lightning talks, and quick breaks for lunch and snacks throughout the day.  Also, DevCon is fun. It’s two days to step away from your desk and become immersed in a creative, accepting, and open environment.</p>

<div align="center">
   <iframe width="560" height="315" src="https://www.youtube.com/embed/8FR0tO1-1rk" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</div>


<p>DevCon is a great example of the work that can be done across a wide variety of groups collaborating, allowing us to create something amazing. Some of these groups include:</p>

<ul>
<li>Presenters. Cerner has an amazing community of people who step up and share their stories, trials, ideas, and new information. The presentations are the core of what makes this conference a success and topic tracks range from devops and experiences with bleeding edge programming languages/frameworks, to people skills and UX design.</li>
<li>A group of user experience designers that put an impressive level of thought and consideration into the aesthetics of the space, the flow of the event, and the promotional materials used before, during, and after the event.</li>
<li>Organizers and volunteers who put their heart into choosing the right talks, training presenters, recruiting keynote speakers, choosing menus, organizing activities, marketing sessions, and helping attendees be at the right place at the right time. It takes a lot of work on the ground to get this thing going, then to successfully recreate it year after year.</li>
</ul>


<p>See some of our favorite DevCon talks over the years on our CernerEng YouTube channel:</p>

<ul>
<li><p><a href="https://www.youtube.com/watch?v=5Aabg_IpXpk">The Power of Pranks with Carl Chesser and Cornel Codrea</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=1d-Hx7v36ng">Leagues of Sea &amp; Sky with Dr. Jeff Norris</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=ecjvI-CbR60">Live Coding the Intersection Between the Arts, Research and Education with Sam Aaron</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=vZpt1lHYTNE">Don&rsquo;t Blink &ndash; a Pursuit in Cognitive Bias with Brandy Poiry &amp; Michelle Brush</a></p></li>
<li><p><a href="https://www.youtube.com/watch?v=0zqBlRW_6jA">Less Risk Through Greater Humanity with Dave Rensin</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2^5 Coding Competition 2018]]></title>
    <link href="http://engineering.cerner.com/blog/2-to-the-5th-coding-competition-2018/"/>
    <updated>2018-12-14T00:00:00-06:00</updated>
    <id>http://engineering.cerner.com/blog/2-to-the-5th-coding-competition-2018</id>
    <content type="html"><![CDATA[<p>At Cerner, associates are always encouraged to develop tools and methods to improve their productivity. With this year&rsquo;s theme being &ldquo;Engineering Productivity,&rdquo; Cerner&rsquo;s fourth annual <a href="https://engineering.cerner.com/blog/2-to-the-5th-coding-competition-2017/">2<sup>5</sup> Coding Competition</a> provided associates another opportunity to dive into this subject and get involved in <a href="https://engineering.cerner.com/culture/">Cerner&rsquo;s development culture</a>.</p>

<p>As usual, this year&rsquo;s 2<sup>5</sup> Coding Competition was kicked off alongside Programmer&rsquo;s Day festivities on September 13th. The competition lasts 32 days, and associates are encouraged to submit code every day. During this year&rsquo;s competition, over 200 code snippet submissions in a total of 59 different languages marked another successful run of the competition. This year the participants were judged based on the following categories:</p>

<ul>
<li><strong>Best Representation</strong>: What captures the concept of &ldquo;engineering productivity&rdquo; the best?</li>
<li><strong>Most Obfuscated</strong>: Which code snippet was the most difficult to understand?</li>
<li><strong>Greatest Variety in Languages</strong>: Which repository contained the most variety in programming languages across submissions?</li>
</ul>


<p>Even though each submission had to be 32 lines of code or less, it didn&rsquo;t stop the participants from brainstorming and executing great ideas ranging from <a href="https://jenkins.io/doc/book/pipeline/">Jenkins Pipelines</a>, creating shell commands, and automating tasks for the tools we use every day. The many entries received exemplified how easy it is to increase productivity in an engineer&rsquo;s daily life with just a few lines of code.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2018-12-14-2-to-the-5th-coding-competition-2018/2-to-the-5th-2018-1.jpeg"></p>

<h2>My Experience</h2>

<p>As a participant, my biggest takeaway from this event was the learning experience it provided me. I was able to not only expand my skill set by working on the projects that I was passionate about, but also learn about different technologies. I found myself often inspired by reading through other participants&#8217; submissions. The restriction of 32 lines of code drove all of us as participants to write clean and concise solutions. It also made learning from each other&rsquo;s code snippets fun and straightforward. This event also helped me understand how easy it is to find new project ideas. Some ways participants could easily get inspired include discovering a new library heard about in a <a href="https://www.youtube.com/user/CernerEng">Tech Talk</a>, a cool new framework that your team started using, or even a complaint about how difficult it is to use a tool. All these things can inspire and drive participants to develop projects that are going to enhance their own personal knowledge about the new technologies or even help improve other people&rsquo;s work efficiency.</p>

<p>By combining the newly learned technologies and the inspirations I found, I was able to develop tools that make my daily work easier. By learning how to develop chrome extensions, I automated some steps in our timesheet submission system including automatically adding holiday timecode. Furthermore, by researching the ins and outs of shell scripting, I simplified various tasks in command line that would otherwise be complicated to execute. During the competition, I benefited from code snippets submitted by other 2<sup>5</sup> participants such as a bat file that enables users to open the GitHub repository URL from the local git repo. 2<sup>5</sup> provides a platform for anyone who wants to learn and share ideas, and it doesn&rsquo;t require big time commitments. I believe it is a perfect opportunity for our engineers to get involved and innovate.</p>

<h3>The Winners</h3>

<h4>Best Representation: <a href="https://github.com/saqiurila">Jenny Saqiurila</a></h4>

<p>The judges agreed that Jenny&rsquo;s collection of submissions were most closely aligned to the 2018 2<sup>5</sup> theme of &ldquo;Engineering Productivity.” Specifically, the judges noted the high usability of her automated timesheet submission tool.</p>

<h4>Most Obfuscated: <a href="https://github.com/mithuns">Mithun Singh</a></h4>

<p>Mithun captured the award for the Most Obfuscated submission using an esoteric programming language that was comprised of symbols that outputted &ldquo;Hello World.” None of our judges were familiar with this language and found his submission impressive, yet confusing.</p>

<h4>Greatest Variety in Languages: <a href="https://github.com/susmitha-anandarao">Susmitha Anandarao</a></h4>

<p>As the 2<sup>5</sup> competition runs for 32 days, the maximum number of languages that could be used by a participant is 32 languages. Susmita was named this category winner because she submitted all 32 days worth of code and used 32 different languages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ShipIt XIII]]></title>
    <link href="http://engineering.cerner.com/blog/shipit-xiii/"/>
    <updated>2018-11-16T00:00:00-06:00</updated>
    <id>http://engineering.cerner.com/blog/shipit-xiii</id>
    <content type="html"><![CDATA[<h2>What does it take to be awarded the ShipIt Day Golden Keyboard?</h2>

<div align="center">
   <img class="center" src="http://engineering.cerner.com/assets/2018-11-16-shipit-xiii/shipit-xiii-1.jpg" width="300">
</div>


<p>ShipIt Day XIII concluded last week after an intense 24-hours of brainstorming, building, and presenting. Various projects were completed by Cerner associates across twelve diverse organizations. ShipIt Day XIII&rsquo;s projects were some of the most technically advanced this competition has ever seen.</p>

<p>Awarding the Golden Keyboard is no easy job for our judges. Back in 2014, the trophy was created to provide the winning team with a memento that was unique and grew with the competition. Every competition the new winning team adds a trinket to the golden keyboard, so their ShipIt Day victory carries on forever. If you are wondering what it takes to bring home the golden keyboard, look no further than ShipIt Day XIII&rsquo;s first place team, Dreamy Cloudy People.</p>

<h2>Learn from the Winners!</h2>

<p>Dreamy Cloudy People is a team of five individuals: Brett Heroux, Murtuza Syed, Niranjan Kumar, Abhijit Rao, and Swati Kode. The team spent the 24-hour hackathon on a real time push notification mechanism for patient chart web application views using the WebSocket API. Traditionally, data retrieval had been on demand, using AJAX and XMLHttpRequest. Previously, clinicians had to refresh their browser to receive updates to clinical data when reviewing a patient&rsquo;s chart.</p>

<p>With this project, the WebSocket API was leveraged to allow a server to push updates to clients as events were triggered. The web application then updated its views without needing a user to manually refresh the page. They stood up a Java service for web clients to create WebSocket connections and send/receive data. It was also used to broadcast events involving patient data, such as new lab results or orders. The client application uses an existing JavaScript framework, part of Cerner <em>Millennium</em> MPages, to create socket connections and update the state of the application in real time.</p>

<div align="center">
   <img class="center" src="http://engineering.cerner.com/assets/2018-11-16-shipit-xiii/shipit-xiii-2.jpg" width="600">
</div>


<p>During their presentation, Dreamy Cloudy People successfully pitched their improvement to the judges. After the presentation, one of our judges mentioned:</p>

<blockquote><p>Improving communication is always impactful in a clinical setting and improving to near real time is a great enhancement!</p></blockquote>

<p>There are several criteria that teams must showcase to prove their project is worthy of the Golden Keyboard:</p>

<ol>
<li>The project is well designed and captured everything that needed to be included.</li>
<li>The project is technically difficult and tested the team&rsquo;s technical knowledge, often leading to learning a new skill.</li>
<li>The presentation shares the value potential and impact that the improvement/creation has to Cerner, associates, or our stakeholders.</li>
</ol>


<p>Last but not least, a winning ShipIt Day team always makes sure to enjoy the event. One Dreamy Cloudy People team member, Niranjan Kumar, stated his favorite part of ShipIt Day was having &ldquo;the opportunity to focus on projects not directly related to my primary role&rdquo; and the &ldquo;collaboration with peers.&rdquo; Congrats to our first-place team!</p>

<h2>Additional ShipIt XIII Winners</h2>

<h3>2nd Place: No amount of Pepto can stop this ingestion!</h3>

<p><strong>Team members</strong>: Kevin Dunn, Scott Levander, Jeff Koehler, Dave Morgan, Rushabh Shah</p>

<div align="center">
   <img class="center" src="http://engineering.cerner.com/assets/2018-11-16-shipit-xiii/shipit-xiii-6.jpg" width="600">
</div>


<p>This team designed a MS SQL Server database to track files received from clients into <em><a href="https://www.cerner.com/solutions/population-health-management">HealtheIntent</a></em> and determine the latency since the last file arrived, as well as file size. They also created configuration tables to define expected file latency, acceptable thresholds before triggering an alert, and tables to track the people who want to receive an alert.  Feeding off of that data, the team also developed an email alerting service (in C#), <a href="https://www.tableau.com/">Tableau visualization</a> dashboards for internal project investigations, and a Web UI to manage configurations (using PHP/SQL Server).</p>

<h3>3rd Place: Overnight Shippers!</h3>

<p><strong>Team Members</strong>: Varun Kumar Chepuri, Tejaswi Gade, Ed Jalili, Neil Pathare</p>

<div align="center">
   <img class="center" src="http://engineering.cerner.com/assets/2018-11-16-shipit-xiii/shipit-xiii-5.jpg" width="600">
</div>


<p>Currently, there are issues that are being reported on <a href="https://www.splunk.com/">Splunk</a> and there is a lot of manual effort to log <a href="https://www.atlassian.com/software/jira">JIRAs</a> for them and then, developers need to track those issues while making any code changes. The JIRA backlog is building up and there is very little to no effort in cleaning up that backlog or working on fixing those issues. Issues logged in Splunk are not being fixed and these errors or defects are not caught early in the lifecycle. These errors or defects are shipped out to clients impacting their workflow. Therefore, Overnight Shippers! created a service bot which uses Splunk to find errors or exceptions and creates an issue in GitHub. This service bot creates a comment on a Pull Request if a Splunk issue exists for the files that are changed. Other capabilities include the capability to configure the bot per Github repository, log <a href="https://help.github.com/articles/about-issues/">GitHub issues</a> periodically, and support various project types.</p>

<h3>People Choice Awards</h3>

<div align="center">
  <table>
    <tr>
      <td align="center">
        <img class="center" src="http://engineering.cerner.com/assets/2018-11-16-shipit-xiii/shipit-xiii-4.jpg" width="300">
        <sub>Best Project: Centurions</sub>
      </td>
      <td align="center">
        <img class="center" src="http://engineering.cerner.com/assets/2018-11-16-shipit-xiii/shipit-xiii-3.jpg" width="300">
        <sub>Best Presentation: Team Rhinos</sub>
      </td>
      <td align="center">
        <img class="center" src="http://engineering.cerner.com/assets/2018-11-16-shipit-xiii/shipit-xiii-5.jpg" width="300">
        <sub>Best Team Name: Overnight Shippers!</sub>
      </td>
    </tr>
  </table>
</div>


<p></p>

<p>Time to start preparing for ShipIt Day 2019! Thank you to our talented judges Chuck Schneider, Justin Morrison, and Jim Dwyer for serving as our judges.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Our DevCulture Team: Connecting Communities & Empowering Teams to Invent the Future]]></title>
    <link href="http://engineering.cerner.com/blog/devculture-team/"/>
    <updated>2018-11-07T00:00:00-06:00</updated>
    <id>http://engineering.cerner.com/blog/devculture-team</id>
    <content type="html"><![CDATA[<p>The tech industry is constantly evolving; for better or worse, there&rsquo;s no way around it. Now, more than ever, having a culture that fosters collaboration, empowers associates, and supports innovation is vital to a company&rsquo;s success in the face of such constant change. However, an effective culture must be grown organically while being supported by senior leadership. At Cerner, we recognize the challenges involved in growing an effective, rewarding, and fun culture.With this in mind, we&rsquo;ve made intentional strategic investments to overcome them. We’ve taken a unique approach by establishing a team that focuses on growing our culture across dev and ops specifically. Our team is called the DevCulture Team.</p>

<div align="center">
    <img class="center" src="http://engineering.cerner.com/assets/2018-11-07-devculture-team/culture-1.jpg" width="450">
</div>


<h4>Our Mission</h4>

<blockquote><p>We exist as a strategic lever to establish Cerner as a destination for top tech talent, helping shift workforce behavior to catalyze the change Cerner needs for the Next.</p></blockquote>

<p>Cerner associates consider themselves privileged to work on challenging problems in an important space, healthcare. In 2010-2011, associates across dev and ops began to realize how much more they could learn from and contribute to the broader tech industry. We started attending conferences and bringing back new insights on the opportunities available when companies focused on culture as a driver for hiring, retaining, and leveling up associates working on software.</p>

<p>This led to establishing <a href="https://engineering.cerner.com/2013/08/devcon">DevCon</a> (our internal Developers Conference) in 2011, sponsoring local tech meetups as well as large scale tech conferences, sharing our work through this Engineering Health blog platform, and establishing the DevCulture Team officially in 2012. Prior to 2012, all efforts were completed by our first team member as extra projects while gaining the justification for a full time position on this new team. Not long after, we shifted our focus from awareness to associate industry engagement, encouraging associates to speak at conferences and to contribute to open source. As the work continued to increase, the DevCulture Team and our Culture Councils (described in more detail below) have grown around the globe as we work to align our values and advance together.</p>

<div align="center">
    <img class="center" src="http://engineering.cerner.com/assets/2018-11-07-devculture-team/culture-2.jpg" width="450">
    <sub>Currently, we focus on 10,495  associates across Cerner globally which represents a third of the company.</sub>
</div>


<br />


<p>So who do we target and how do we develop our strategies? We focus our programs and work on both sides of the Dev/Ops equation, including user experience and product strategy. We also uniquely report through development executives which gives us the ability to advocate for their perspectives, represent engineering, and align strategies as we partner with other organizations (such as Recruiting, Talent Development, Learning, Finance, etc.) to implement our programs and values.</p>

<p><strong>Culture Councils</strong></p>

<p>In effort to have buy-in, perspectives, and engagement from all sides of the business, we established Culture Councils to help us define our strategic direction. Each year, members are selected from an open application process. These Councils around the globe meet regularly to discuss where we are, where we are going, and where we need to be in order to be successful culturally. From existing programs to identifying cultural gaps, the Councils’ support of our team makes all of our work possible.</p>

<p>Curious about what type of programs we run? We thought you might be. Check out some of our favorites!</p>

<p><strong>DevCon</strong></p>

<p>Embodying our values, DevCon is the foundation of our development culture. Providing opportunities to learn, share, network, and grow, DevCon is an internal conference and now takes place in three locations each year: Kansas City, Philadelphia, and Bangalore.</p>

<p>From industry leader keynote speakers to hours of associate led sessions and a geek trivia night, associates look forward to DevCon all year round. Watch <a href="https://www.youtube.com/watch?v=8FR0tO1-1rk">DevCon highlight videos</a>, <a href="https://www.youtube.com/watch?v=QFfmTLmn3Ow&amp;list=PLSti19ysyJtBJqtXDxtlSFdA1herhJecj">keynote sessions</a>, and some <a href="https://www.youtube.com/watch?v=aZZCZpc0AcY">associate sessions</a> on YouTube to get a feel for what this awesome conference entails.</p>

<div align="center">
    <img class="center" src="http://engineering.cerner.com/assets/2018-11-07-devculture-team/culture-3.jpg" width="450">
    <div style="width: 600px;">
        <sub>Each year, the DevCulture team partners with associates from various organizations and roles to form the Core Planning Team that guides the overall direction of the conference, decides the theme, selects the talks, and plans engaging activities for associates to participate in at the conference.</sub>
    </div>
</div>


<br />


<p><strong>Engaging with the Industry</strong></p>

<p>We believe we have a lot to learn from and share back with the industry and local tech community. From agile methodologies to big data processing, we bring in industry experts on a monthly basis in our Tech Talk Series to share their knowledge and perspectives that help our associates learn and grow. You can subscribe to our <a href="https://www.youtube.com/user/CernerEng?sub_confirmation=1">YouTube Channel</a> to get notified anytime we post one!</p>

<p>While attending and sponsoring conferences helps us bring essential knowledge back to Cerner, we’re privileged to send associates out to speak at conferences each year around the world. Being accepted to these conferences recognizes our associates for their complex work and talent while sharing more about what we’re working on at Cerner. Follow us on <a href="https://twitter.com/CernerEng">Twitter</a> to find out what conferences we’re attending, sponsoring, or speaking at and come say hello! As a fun example of one of our talks, check out Kevin Shekleton’s talk at Strange Loop 2017 on ‘<a href="https://www.youtube.com/watch?v=s0XmiXs8iRw">The Security of Classic Game Consoles</a>’.</p>

<div align="center">
    <img class="center" src="http://engineering.cerner.com/assets/2018-11-07-devculture-team/culture-4.jpg" width="450">
    <sub>Engineering Director Jenni Syed and Engineering Vice President Kevin Shekleton present at FHIR DevDays 2018.</sub>
</div>


<br />


<p>When we consume open source in our software, we have the opportunity to leverage the talent from a broad cross section of the industry to make our solutions better. We also encourage associates to contribute to open source software both internally and externally. Learn more about the work we’re doing in Open Source on our <a href="http://bit.ly/2Oj5DeL">Blog</a>.</p>

<p><strong>ShipIt Day</strong></p>

<p>Modeled after <a href="https://www.atlassian.com/company/shipit">Atlassian’s ShipIt Day</a>, we frequently host these 24 hour hackathons throughout the year in Kansas City, Malvern, Bangalore, and Brasov. We believe this encourages ingenuity and collaboration by promoting cross-pollination of ideas and teams as they solve problems together. Teams in KC compete for the coveted Golden Keyboard and Golden Mouse trophies that travel the campus, each winning team adding a trinket to the trophy representing their unique winning project. Learn about our most recent ShipIt Day winners on this <a href="http://bit.ly/2PQXprk">Engineering Health blog</a>.</p>

<div align="center">
    <img class="center" src="http://engineering.cerner.com/assets/2018-11-07-devculture-team/culture-5.jpg" width="450">
    <sub>Teams present their projects to a panel of judges at the conclusion of the hackathon to determine the winners.</sub>
</div>


<br />


<p><strong>Our Work Can Sometimes Be Quite Odd.</strong></p>

<p>Amidst the strategic work in advancing our culture, we have found ourselves completing work for things most people would never consider to be a small part of their full time adult day job. Some of our favorite odd job memories from the past six years include:</p>

<ul>
<li>Ordering over 34,000 Lego bricks for <a href="https://www.youtube.com/watch?v=E-TcZBTCZdo">DevCon 2014</a> (following multiple strategy meetings and spreadsheets to determine how many would be necessary for our 3,000+ attendees)</li>
<li>Researching backstories on Marvel characters for DevCon 2017</li>
<li>Watching Doctor Who, Star Trek, Star Wars, Harry Potter, Lord of the Rings, etc. as part of our Training Requirements. We’re also required to pass a test covering Marvel vs. DC Characters. This is all to help ensure our team understand various cultural reference points that are popular amongst our target audience.</li>
<li>Building an elaborate patchwork of Lego shapes on a giant Lego board to serve as a background for an all company meeting
Renting a uHaul to transport old couches, coffee tables, TV stands, and TV’s we purchased from thrift stores in order to create retro living room spaces at <a href="https://www.youtube.com/watch?v=cE0YoFg-hkE">DevCon 2013</a> where associates played video games between sessions.</li>
</ul>


<div align="center">
    <img class="center" src="http://engineering.cerner.com/assets/2018-11-07-devculture-team/culture-6.jpg" width="450">
    <div style="width: 600px;">
        <sub>Prior to moving into our brand new Kansas City <a href="http://bit.ly/2GP1vuU">Innovations Campus</a> in 2017, our team made a video to demonstrate all the ways the desks can be configured to showcase the new setup. To avoid it being boring, we dressed up with various costumes we had on hand from other programs.</sub>
    </div>
</div>


<br />


<p>We believe culture is a journey, not a destination, and something we will always have to invest in and improve upon. These programs and efforts mentioned just scratch the surface of what we’re working on, with other projects ranging from how we can increase manager effectiveness to influencing our growth in continuous delivery models. Culture doesn&rsquo;t change overnight, we&rsquo;re iterating over ours with new programs based on regular feedback, that must be supported from within, and/or that we feel it&rsquo;s important enough to truly invest in it.</p>

<p>Interested in starting your own culture team? Great idea! We started out with smaller programs and projects to prove their effect and as they grew, documented the amount of work and any measurements we could to provide justification to have our first full time team member in 2012. Measuring cultural advancement can be challenging. We have done this by pulling engagement rates across different roles and organizations to gauge what is or isn’t effective, surveys following program events, and collecting anecdotal evidence of effect of programs (i.e. our team implemented these new SRE approaches/strategies because of Dave Rensin&rsquo;s keynote at DevCon last month).</p>

<p>Join us on <a href="https://twitter.com/CernerEng">Twitter</a> to stay up to date with all our cultural programs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Infusing a Culture of Cybersecurity Within Cerner Engineering]]></title>
    <link href="http://engineering.cerner.com/blog/culture-of-cybersecurity/"/>
    <updated>2018-10-29T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/blog/culture-of-cybersecurity</id>
    <content type="html"><![CDATA[<p>With October being <a href="https://www.dhs.gov/national-cyber-security-awareness-month">Cybersecurity Awareness month</a>, we thought it would be a good time to reflect on some of the things we do in engineering to educate our associates and infuse security into our culture. We have over 28,000 associates worldwide supporting hundreds of solutions with millions of lines of code. Each associate has a specialization, such as software development, system support, and consulting. Keeping everyone up to date on the latest in security is a difficult task.</p>

<p>So how do we do it? We have teams dedicated to security that work directly within engineering. These teams have various responsibilities such as ownership of scanning tools and vulnerability tracking. My team&rsquo;s goal is to bridge the gap by injecting security as a first-class citizen in the software development lifecycle. When working with developers, you have to make the right thing to do the easy thing to do. This is no different when it comes to security. In order to make security easy, we scan, assess, and create a plan for our developers to remediate their vulnerabilities. We promote the tools for scanning, help teams understand the results, and identify fixes for vulnerabilities. We run a monthly cybersecurity meetup which we use as a venue for associates to speak and learn about varying security topics.</p>

<div align="center">
  <table>
    <tr>
      <td align="center">
        <img class="center" src="http://engineering.cerner.com/assets/2018-10-29-culture-of-cybersecurity/cybersecurity-1.jpg" width="450">
      </td>
      <td align="center">
        <img class="center" src="http://engineering.cerner.com/assets/2018-10-29-culture-of-cybersecurity/cybersecurity-2.jpg" width="450">
      </td>
    </tr>
  </table>
  <sub>Andy Nelson opening the September edition of the Cybersecurity meetup and Sebastian Brown presenting at the July edition.</sub>
</div>


<p>We also take advantage of opportunities like Cybersecurity Awareness month. We bridge organizational gaps to host a variety of security focused events, engaging associates in development, security, and operations to facilitate better relationships and collaboration. Events like these lower the barrier to entry for our developers to learn more secure practices, and embrace and celebrate the progress we are making in our security journey. We kicked off the activities this month with an external tech talk from <a href="https://twitter.com/bhommertzheim">Britney Hommertzheim</a>. Britney, the Director of Information Security at <a href="https://www.amctheatres.com">AMC Theatres</a>, presented on how we can better integrate security teams and developers. It was a great talk and you can watch the talk on our <a href="https://youtu.be/DTYiNidFjzM">YouTube</a> channel. We invited another external speaker for our Cybersecurity meetup a few weeks ago too. Caleb Christopher, a Technical Business Adviser at <a href="https://www.allegianttechnology.com">Allegiant Technology</a>, gave a great talk titled &ldquo;Defeating Email Fraud with DMARC&rdquo;. Along side those 2 events, we have held lunch and learns throughout the month, and are wrapping it all up with an hour of security focused lightning talks tomorrow.</p>

<div align="center">
  <table>
    <tr>
      <td align="center">
        <img class="center" src="http://engineering.cerner.com/assets/2018-10-29-culture-of-cybersecurity/cybersecurity-3.jpg" width="450">
      </td>
      <td align="center">
        <img class="center" src="http://engineering.cerner.com/assets/2018-10-29-culture-of-cybersecurity/cybersecurity-4.jpg" width="450">
      </td>
    </tr>
  </table>
  <sub>Britney Hommertzheim giving an external tech talk about integrating security across organizations</sub>
</div>


<p>Security is not easy and we always have to strive to get better. Our development, operations, and security teams must work together, so we are doing our best to provide a forum for collaboration and sharing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Girl Scouts Earn Cybersecurity Badge at Cerner]]></title>
    <link href="http://engineering.cerner.com/blog/girl-scouts-cybersecurity/"/>
    <updated>2018-10-05T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/blog/girl-scouts-cybersecurity</id>
    <content type="html"><![CDATA[<p>As a software engineering executive from Colombia, I thought that the best way to honor <a href="https://www.hispanicheritagemonth.gov">Hispanic Heritage Month</a> (September 15-October 15) was to help the local Girl Scout Hispanic troops earn one of the new cybersecurity badges. October is Cybersecurity Awareness Month, having the activities nearing October seemed very fitting.</p>

<p><a href="https://www.girlscouts.org/en/about-girl-scouts/girl-scouts-and-stem.html">Girl Scouts has been focusing on STEM badges</a> for all ages with several new initiatives in the past couple of years. The cybersecurity badges are some of the latest additions to the growing list of STEM badges that girls can earn. I was excited to help the troops earn their badge and I wanted to make it very special and appealing to these girls, so I decided to run the event entirely in Spanish. I thought that this approach would be a great way not only to engage the girls, but also their family members who often accompany them to the events.</p>

<p>The badge was designed to be very interactive and engaging. The first activity was a game that helped the girls think about all the different kinds of electronic devices that exist, such as Fitbits, iPads, cell phones, TVs, etc, and how they interact with them in their daily life. The activity then focused on how security in everyday life can translate to security in cyberspace.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2018-10-05-girl-scouts-cybersecurity/girl-scouts-1.jpg" width="600"></p>

<p>The next part of the event focused on helping the girls understand how much of our life is connected to the internet and how different our life would be if it wasn’t so. The girls had fun describing how they would live without internet. They all agreed that life without internet would be challenging but they would still be able to read and go camping!</p>

<p>To help illustrate the concept of how layers of security are important, the girls drew on whiteboards how they could defend a castle. The girls were quite inventive on this interactive activity!</p>

<div align="center">
  <table>
    <tr>
      <td align="center">
        <img class="center" src="http://engineering.cerner.com/assets/2018-10-05-girl-scouts-cybersecurity/girl-scouts-2.jpg" width="650">
      </td>
      <td align="center">
        <img class="center" src="http://engineering.cerner.com/assets/2018-10-05-girl-scouts-cybersecurity/girl-scouts-3.jpg" width="250">
      </td>
    </tr>
  </table>
  <sub>The girls secured their “castles” effectively. One of the most technologically advanced castles included dragons, a force-field and a keypad for the password.</sub>
</div>


<p>The subsequent area of emphasis was regarding how electronic devices communicate. It was interesting to break down networking concepts like TCP/IP, network topology, and firewalls to a group of 1<sup>st</sup> and 2<sup>nd</sup> graders, but I made these concepts relatable. IP packets were explained by building key chains using beads that spelled “brownies.” The activity involved the girls acting as senders, messengers and receivers, along with individual beads acting as packets with headers, contents, and other metadata.</p>

<div align="center">
  <img class="center" src="http://engineering.cerner.com/assets/2018-10-05-girl-scouts-cybersecurity/girl-scouts-4.jpg" width="600">
  <sub>One scout displays her finished IP packet keychain!</sub>
</div>


<p>Safety rules were an integral part of the badge; the Brownies formed groups and made posters to help others understand the importance of the following internet rules:</p>

<ul>
<li>Don’t talk to strangers</li>
<li>Stop and think before you act</li>
<li>Don’t believe everything that you see or everything that people say</li>
</ul>


<p>We wrapped up by touring <a href="https://engineering.cerner.com/blog/one-year-calling-innovations-home">our Innovations campus</a> and highlighting how technology helps us improve our health and the health of our communities. Overall, this was another phenomenal opportunity for the Girl Scouts to engage with Cerner. It exposed them to  key technology concepts and it expanded the prevalence of STEM education throughout the community.</p>

<p><em>To see more about Denisse’s involvement in the Hispanic Girl Scout community, <a href="https://engineering.cerner.com/blog/influencing-the-young-spanish-seaking-female-generation">check out this blog from 2017</a>. Denisse has played a vital role in bringing STEM opportunities to the local troops. In fact, she was recently recognized by the Hispanic Chamber of Commerce of Greater Kansas City for her philanthropic efforts by receiving the STEM and Education Nuestra Latina 2018 Award. Congratulations, Denisse!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Steps for Jenkins Pipeline]]></title>
    <link href="http://engineering.cerner.com/blog/ssh-steps-for-jenkins-pipeline/"/>
    <updated>2018-09-20T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/blog/ssh-steps-for-jenkins-pipeline</id>
    <content type="html"><![CDATA[<p><strong>Pipeline-as-code</strong> or defining the deployment pipeline through code rather than manual job creation through UI, provides tremendous benefits for teams automating builds and deployment infrastructure across their environments.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2018-09-20-ssh-steps-for-jenkins-pipeline/jenkins-pipeline.png" width="800"></p>

<p><em>Source of image: <a href="https://jenkins.io/doc/book/pipeline/">https://jenkins.io/doc/book/pipeline/</a></em></p>

<h1>Jenkins Pipelines</h1>

<p><a href="https://jenkins.io/">Jenkins</a> is a well-known open source continuous integration and continuous deployment automation tool. With the latest 2.0 release, Jenkins introduced the Workflow plugin that implements Pipeline-as-code. This plugin lets you define delivery pipelines using concise scripts which deal elegantly with jobs involving persistence and asynchrony.</p>

<p>The Pipeline-as-code&rsquo;s script is also known as a <em>Jenkinsfile</em>.</p>

<p>Jenkinsfiles uses a domain specific language syntax based on the <a href="http://groovy-lang.org/">Groovy</a> programming language. They are persistent files which can be checked in and version-controlled along with the rest of their project source code. This file can contain the complete set of encoded steps (steps, nodes, and stages) necessary to define the entire application life-cycle, becoming the intersecting point between development and operations.</p>

<h2>Missing piece of the puzzle</h2>

<p>One of the most common steps defined in a basic pipeline workflow is the <em>Deploy</em> step. The deployment stage encompasses everything from publishing build artifacts to pushing code into pre-production and production environments. This deployment stage usually involves both development and operations teams logging onto various remote nodes to run commands and/or scripts to deploy code and configuration. While there are a couple of existing ssh plugins for Jenkins, they currently don&rsquo;t support the functionality such as logging into nodes for pipelines. Thus, there was a need for a plugin that supports these steps.</p>

<h1>Introducing SSH Steps</h1>

<p><img class="center" src="http://engineering.cerner.com/assets/2018-09-20-ssh-steps-for-jenkins-pipeline/jenkins-ssh-steps-plugin.png"></p>

<p>Recently, our team consisting of <a href="https://github.com/ghenkes">Gabe Henkes</a>, <a href="https://github.com/wuchenwang">Wuchen Wang</a> and <a href="https://github.com/nrayapati">myself</a> started working on a project to automate deployments through Jenkins pipelines to help facilitate running commands on over one thousand nodes. We looked at several options including existing plugins, internal shared Jenkins libraries, and others. In the end, we felt it was best to create and open source a plugin to fill this gap so that it can be used across Cerner and beyond.</p>

<p>The initial version of this new plugin SSH Steps supports the following:</p>

<ul>
<li><code>sshCommand</code>: Executes the given command on a remote node.</li>
<li><code>sshScript</code>: Executes the given shell script on a remote node.</li>
<li><code>sshGet</code>: Gets a file/directory from the remote node to current workspace.</li>
<li><code>sshPut</code>: Puts a file/directory from the current workspace to remote node.</li>
<li><code>sshRemove</code>: Removes a file/directory from the remote node.</li>
</ul>


<h2>Usage</h2>

<p>Below is a simple demonstration on how to use above steps. More documentation can be found on <a href="https://github.com/jenkinsci/ssh-steps-plugin/blob/master/README.adoc">GitHub</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">remote</span> <span class="o">=</span> <span class="o">[:]</span>
</span><span class='line'><span class="n">remote</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s2">&quot;node&quot;</span>
</span><span class='line'><span class="n">remote</span><span class="o">.</span><span class="na">host</span> <span class="o">=</span> <span class="s2">&quot;node.abc.com&quot;</span>
</span><span class='line'><span class="n">remote</span><span class="o">.</span><span class="na">allowAnyHosts</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">node</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">withCredentials</span><span class="o">([</span><span class="n">usernamePassword</span><span class="o">(</span><span class="nl">credentialsId:</span> <span class="s1">&#39;sshUserAcct&#39;</span><span class="o">,</span> <span class="nl">passwordVariable:</span> <span class="s1">&#39;password&#39;</span><span class="o">,</span> <span class="nl">usernameVariable:</span> <span class="s1">&#39;userName&#39;</span><span class="o">)])</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">remote</span><span class="o">.</span><span class="na">user</span> <span class="o">=</span> <span class="n">userName</span>
</span><span class='line'>        <span class="n">remote</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">stage</span><span class="o">(</span><span class="s2">&quot;SSH Steps Rocks!&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">writeFile</span> <span class="nl">file:</span> <span class="s1">&#39;test.sh&#39;</span><span class="o">,</span> <span class="nl">text:</span> <span class="s1">&#39;ls&#39;</span>
</span><span class='line'>            <span class="n">sshCommand</span> <span class="nl">remote:</span> <span class="n">remote</span><span class="o">,</span> <span class="nl">command:</span> <span class="s1">&#39;for i in {1..5}; do echo -n \&quot;Loop \$i \&quot;; date ; sleep 1; done&#39;</span>
</span><span class='line'>            <span class="n">sshScript</span> <span class="nl">remote:</span> <span class="n">remote</span><span class="o">,</span> <span class="nl">script:</span> <span class="s1">&#39;test.sh&#39;</span>
</span><span class='line'>            <span class="n">sshPut</span> <span class="nl">remote:</span> <span class="n">remote</span><span class="o">,</span> <span class="nl">from:</span> <span class="s1">&#39;test.sh&#39;</span><span class="o">,</span> <span class="nl">into:</span> <span class="s1">&#39;.&#39;</span>
</span><span class='line'>            <span class="n">sshGet</span> <span class="nl">remote:</span> <span class="n">remote</span><span class="o">,</span> <span class="nl">from:</span> <span class="s1">&#39;test.sh&#39;</span><span class="o">,</span> <span class="nl">into:</span> <span class="s1">&#39;test_new.sh&#39;</span><span class="o">,</span> <span class="nl">override:</span> <span class="kc">true</span>
</span><span class='line'>            <span class="n">sshRemove</span> <span class="nl">remote:</span> <span class="n">remote</span><span class="o">,</span> <span class="nl">path:</span> <span class="s1">&#39;test.sh&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Configuring via YAML</h2>

<p>At Cerner, we always strive to have simple configuration files for CI/CD pipelines whenever possible. With that in mind, my team built a wrapper on top of these steps from this plugin. After some design and analysis, we came up with the following YAML structure to run commands across various remote groups:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">config</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">credentials_id</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sshUserAcct</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">remote_groups</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">r_group_1</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">node01</span>
</span><span class='line'>      <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">node01.abc.net</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">node02</span>
</span><span class='line'>      <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">node02.abc.net</span>
</span><span class='line'>  <span class="l-Scalar-Plain">r_group_2</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">node03</span>
</span><span class='line'>      <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">node03.abc.net</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">command_groups</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">c_group_1</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">commands</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&#39;ls</span><span class="nv"> </span><span class="s">-lrt&#39;</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&#39;whoami&#39;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">scripts</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&#39;test.sh&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">c_group_2</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">gets</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">from</span><span class="p-Indicator">:</span> <span class="s">&#39;test.sh&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">to</span><span class="p-Indicator">:</span> <span class="s">&#39;test_new.sh&#39;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">puts</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">from</span><span class="p-Indicator">:</span> <span class="s">&#39;test.sh&#39;</span>
</span><span class='line'>          <span class="l-Scalar-Plain">to</span><span class="p-Indicator">:</span> <span class="s">&#39;.&#39;</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">removes</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="s">&#39;test.sh&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">steps</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">remote_groups</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">r_group_1</span>
</span><span class='line'>      <span class="l-Scalar-Plain">command_groups</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">c_group_1</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">remote_groups</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">r_group_2</span>
</span><span class='line'>      <span class="l-Scalar-Plain">command_groups</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">c_group_2</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above example runs commands from <code>c_group_1</code> on remote nodes within <code>r_group_1</code> in parallel before it moves on to the next group using <code>sshUserAcct</code> (from the <a href="https://jenkins.io/doc/book/using/using-credentials/">Jenkins Credentials</a> store) to logon to nodes.</p>

<h2>Shared Pipeline Library</h2>

<p>We have created a shared pipeline library that contains a <code>sshDeploy</code> step to support the above mentioned YAML syntax. Below is the code snippet for the sshDeploy step from the library. The full version can be found <a href="https://github.com/nrayapati/ssh-deploy-library">here</a> on Github.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="err">#</span><span class="o">!</span><span class="s">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">groovy</span>
</span><span class='line'><span class="kt">def</span> <span class="nf">call</span><span class="o">(</span><span class="n">String</span> <span class="n">yamlName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">yaml</span> <span class="o">=</span> <span class="n">readYaml</span> <span class="nl">file:</span> <span class="n">yamlName</span>
</span><span class='line'>    <span class="n">withCredentials</span><span class="o">([</span><span class="n">usernamePassword</span><span class="o">(</span><span class="nl">credentialsId:</span> <span class="n">yaml</span><span class="o">.</span><span class="na">config</span><span class="o">.</span><span class="na">credentials_id</span><span class="o">,</span> <span class="nl">passwordVariable:</span> <span class="s1">&#39;password&#39;</span><span class="o">,</span> <span class="nl">usernameVariable:</span> <span class="s1">&#39;userName&#39;</span><span class="o">)])</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">yaml</span><span class="o">.</span><span class="na">steps</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">stageName</span><span class="o">,</span> <span class="n">step</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="n">step</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span>
</span><span class='line'>                <span class="kt">def</span> <span class="n">remoteGroups</span> <span class="o">=</span> <span class="o">[:]</span>
</span><span class='line'>                <span class="kt">def</span> <span class="n">allRemotes</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>                <span class="n">it</span><span class="o">.</span><span class="na">remote_groups</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">remoteGroups</span><span class="o">[</span><span class="n">it</span><span class="o">]</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="na">remotes</span><span class="o">.</span><span class="s2">&quot;$it&quot;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="kt">def</span> <span class="n">commandGroups</span> <span class="o">=</span> <span class="o">[:]</span>
</span><span class='line'>                <span class="n">it</span><span class="o">.</span><span class="na">command_groups</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">commandGroups</span><span class="o">[</span><span class="n">it</span><span class="o">]</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">.</span><span class="na">commands</span><span class="o">.</span><span class="s2">&quot;$it&quot;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="kt">def</span> <span class="n">isSudo</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'>                <span class="n">remoteGroups</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span> <span class="n">remoteGroupName</span><span class="o">,</span> <span class="n">remotes</span> <span class="o">-&gt;</span>
</span><span class='line'>                    <span class="n">allRemotes</span> <span class="o">+=</span> <span class="n">remotes</span><span class="o">.</span><span class="na">collect</span> <span class="o">{</span> <span class="n">remote</span> <span class="o">-&gt;</span>
</span><span class='line'>                        <span class="k">if</span><span class="o">(!</span><span class="n">remote</span><span class="o">.</span><span class="na">name</span><span class="o">)</span>
</span><span class='line'>                            <span class="n">remote</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">remote</span><span class="o">.</span><span class="na">host</span>
</span><span class='line'>                        <span class="n">remote</span><span class="o">.</span><span class="na">user</span> <span class="o">=</span> <span class="n">userName</span>
</span><span class='line'>                        <span class="n">remote</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span>
</span><span class='line'>                        <span class="n">remote</span><span class="o">.</span><span class="na">allowAnyHosts</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>                        <span class="n">remote</span><span class="o">.</span><span class="na">groupName</span> <span class="o">=</span> <span class="n">remoteGroupName</span>
</span><span class='line'>                        <span class="n">remote</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">if</span><span class="o">(</span><span class="n">allRemotes</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span><span class="o">(</span><span class="n">allRemotes</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="kt">def</span> <span class="n">stepsForParallel</span> <span class="o">=</span> <span class="n">allRemotes</span><span class="o">.</span><span class="na">collectEntries</span> <span class="o">{</span> <span class="n">remote</span> <span class="o">-&gt;</span>
</span><span class='line'>                            <span class="o">[</span><span class="s2">&quot;${remote.groupName}-${remote.name}&quot;</span> <span class="o">:</span> <span class="n">transformIntoStep</span><span class="o">(</span><span class="n">stageName</span><span class="o">,</span> <span class="n">remote</span><span class="o">.</span><span class="na">groupName</span><span class="o">,</span> <span class="n">remote</span><span class="o">,</span> <span class="n">commandGroups</span><span class="o">)]</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                        <span class="n">stage</span><span class="o">(</span><span class="n">stageName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">parallel</span> <span class="n">stepsForParallel</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                        <span class="kt">def</span> <span class="n">remote</span> <span class="o">=</span> <span class="n">allRemotes</span><span class="o">.</span><span class="na">first</span><span class="o">()</span>
</span><span class='line'>                        <span class="n">stage</span><span class="o">(</span><span class="n">stageName</span> <span class="o">+</span> <span class="s2">&quot;\n&quot;</span> <span class="o">+</span> <span class="n">remote</span><span class="o">.</span><span class="na">groupName</span> <span class="o">+</span> <span class="s2">&quot;-&quot;</span> <span class="o">+</span> <span class="n">remote</span><span class="o">.</span><span class="na">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">transformIntoStep</span><span class="o">(</span><span class="n">stageName</span><span class="o">,</span> <span class="n">remote</span><span class="o">.</span><span class="na">groupName</span><span class="o">,</span> <span class="n">remote</span><span class="o">,</span> <span class="n">commandGroups</span><span class="o">).</span><span class="na">call</span><span class="o">()</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>By using the step (as described in the snippet above) from this shared pipeline library, a Jenkinsfile can be reduced to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="nd">@Library</span><span class="o">(</span><span class="s1">&#39;ssh_deploy&#39;</span><span class="o">)</span> <span class="n">_</span>
</span><span class='line'>
</span><span class='line'><span class="n">node</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">checkout</span> <span class="n">scm</span>
</span><span class='line'>  <span class="nf">sshDeploy</span><span class="o">(</span><span class="s1">&#39;dev/deploy.yml&#39;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>An example execution of the above pipeline code in Blue Ocean looks like this:</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2018-09-20-ssh-steps-for-jenkins-pipeline/jenkins-ssh-deploy.png" width="600"></p>

<h2>Wrapping up</h2>

<p>Steps from the <a href="https://github.com/jenkinsci/ssh-steps-plugin">SSH Steps Plugin</a> are deliberately generic enough that they can be used for various other use-cases as well, not just for deploying code. Using SSH Steps has significantly reduced the time we spend on deployments and has given us the possibility of easily scaling our deployment workflows to various environments.</p>

<p>Help us make this <a href="https://github.com/jenkinsci/ssh-steps-plugin">plugin</a> better by contributing. Whether it is adding or suggesting a new feature, bug fixes, or simply improving documentation, contributions are always welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ShipIt XII]]></title>
    <link href="http://engineering.cerner.com/blog/shipit-xii/"/>
    <updated>2018-08-30T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/blog/shipit-xii</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://engineering.cerner.com/assets/2018-08-30-shipit-xii/shipitxii-logo.png" width="400"></p>

<p>This month we held our quarterly hackathon event- called ShipIt Day. We would like to thank all the participants for making ShipIt Day XII a huge success. With 75 participants, we had associates representing 13 different organizations across Cerner. These associates were given 24-hours to meet the requirements of this hackathon which included making something that was innovative, usable, and value-adding. As the clock ticked down, our associates worked in their teams to complete a project while taking some time to enjoy the fun activities happening throughout ShipIt day.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2018-08-30-shipit-xii/shipitxii-1.jpg" width="640"></p>

<p>It is an unwritten rule that the balance between fun and project time during ShipIt days should remain even. Associates are encouraged to enjoy the collaborative spaces of Cerner&rsquo;s Innovations campus and participate in various activities such as ping-pong, eating snacks, playing games, and building relationships with other Cerner associates. Participants were given vouchers to use in the Innovations Café for breakfast and lunch. They were also served a fully-catered taco bar to stay energized for dinner.</p>

<p>This year, <a href="https://www.imdb.com/title/tt0086567/">WarGames</a> and <a href="https://en.wikipedia.org/wiki/ColecoVision">ColecoVision</a> gameplay were brought in for participants to enjoy throughout the evening. As said best by Cerner associate, Carl Chesser (<a href="https://twitter.com/che55er">@che55er</a>):</p>

<blockquote><p>Software creation requires additional breaks… ShipIt at Cerner is no exception of this software craftmanship approach.</p></blockquote>

<p>The morning crept up on the teams quickly, and they had to begin preparing for their 4-minute presentation in the Assembly at Innovations campus. The goal of the team presentations is to explain the project, how it was implemented, and show a brief demo to the judges and audience. All the teams delivered competitive pitches, which made judging very difficult.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2018-08-30-shipit-xii/shipitxii-2.jpg" width="640"></p>

<p>Huge thanks to Micah Whitacre, Nick Smith, Jon Miller, and Jared Moore for serving as our rockstar judges!</p>

<h2>Overall Winners</h2>

<p>The judges gathered together after the completion of the presentations to decide the top three performing teams. Congratulations to the following teams on your outstanding performance!</p>

<h3>First Place: Let&rsquo;s Take Suggestions</h3>

<p>Team Members: Scott Grissom, Alex Harder, and Matt Nelson</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2018-08-30-shipit-xii/shipitxii-8.jpg" width="400"></p>

<p>This team was awarded the Golden Keyboard for their first-place achievement. They will defend the traveling trophy for the upcoming months and add a symbolic trinket to the collection for their team to be remembered in ShipIt history.</p>

<p>The focus of this project was to provide a mechanism for customized cloud-based ACL testing. Utilizing serverless functions through the <a href="https://www.openfaas.com/">OpenFaaS framework</a>, the team enabled rapid development and deployment of serverless functions which test a specific type of network access, e.g. using <a href="https://en.wikipedia.org/wiki/CURL">cURL</a> to access a ReST endpoint or a JDBC client to access a database instance. Deploying these functions to the same cloud instance which hosts services provides a more accurate testing of network dependencies from the perspective of a service as opposed to testing from a developer machine.</p>

<h3>Second Place: &#35;crowdercrowd</h3>

<p>Team Members: Ian Kottman, Heather Boveri, Robert Ryterski, and David Crowder</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2018-08-30-shipit-xii/shipitxii-6.jpg" width="400"></p>

<p>&#35;crowdercrowd created a dashboard showing cluster utilization of applications across both on-premise and public cloud clusters. The metrics show how much CPU and memory an application is using versus how much it is requesting, along with an estimated yearly cost to run the application. This dashboard will be used to identify what applications can be scaled down to better fit their actual resource needs.</p>

<h3>Third Place: Bravo Avocado</h3>

<p>Team Members: Jan Monterrubio, Maximilian Schroeder, and Jacob Zimmermann</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2018-08-30-shipit-xii/shipitxii-7.jpg" width="400"></p>

<p>Bravo Avocado created a <a href="https://maven.apache.org/index.html">Maven plugin</a> that starts a <a href="https://www.docker.com/">Docker container</a> of a ReST service. It also allows the integration tests to dynamically connect to the correct URL and port of the container. This lets users run integration tests directly against the working code as part of the Maven lifecycle. Before the team wrote the plugin, they had to manually stand up the service and update the test configuration to validate any changes. By tying these eight steps to an existing command, users can streamline development for ReST services.</p>

<h3>People&rsquo;s Choice</h3>

<p>Aside from our talented official judges, many associates join in on the ShipIt Day fun to act as peer judges in the People&rsquo;s Choice category. The large audience during the ShipIt presentations was asked to get involved and vote for their favorite teams in certain categories.</p>

<ul>
<li><p><strong>Favorite Team Name</strong>: Chef BoyarDeployments could be better (Steven Goldberg, Ryan Neff)</p></li>
<li><p><strong>Favorite Project</strong>: Audio Bot (Mitali Paygude, Kunal Suryavanshi, Vinay Datta Pinnaka)</p></li>
<li><p><strong>Best Presentation</strong>: Team Rhinos (Venkata Adusumilli, Veda Bhaskar Bhamidipati, Naga Prashanth Chanda, Sunand Kumar Matam, Prashanth Gajula)</p></li>
</ul>


<div align="center">
  <table>
    <tr>
      <td align="center">
        <img class="center" src="http://engineering.cerner.com/assets/2018-08-30-shipit-xii/shipitxii-4.jpg" width="300">
        <sub>Favorite Team Name</sub>
      </td>
      <td align="center">
        <img class="center" src="http://engineering.cerner.com/assets/2018-08-30-shipit-xii/shipitxii-5.jpg" width="300">
        <sub>Favorite Project</sub>
      </td>
      <td align="center">
        <img class="center" src="http://engineering.cerner.com/assets/2018-08-30-shipit-xii/shipitxii-3.jpg" width="300">
        <sub>Best Presentation</sub>
      </td>
    </tr>
  </table>
</div>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Summer of Engineering Health: A Software Intern's Story]]></title>
    <link href="http://engineering.cerner.com/blog/summer-of-engineering-health-intern-story/"/>
    <updated>2018-07-26T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/blog/summer-of-engineering-health-intern-story</id>
    <content type="html"><![CDATA[<p><em>Pratik will be starting his Junior year at the University of Michigan this Fall studying Computer Science and Biomedical Engineering. This summer he’s a Software Intern on Cerner’s LightsOn Network team. This is the story of his summer experience:</em></p>

<p>As a college student, it&rsquo;s not every day that you get to work on cutting edge technology to transform healthcare as we know it. Every morning, I walk past a wall on the way to the elevator: &ldquo;Health care is too important to stay the same.&rdquo; Simple enough, huh?</p>

<p>Healthcare has been one of the few fields that has yet to fully embrace the possibilities new technology has afforded. Throughout my internship, there&rsquo;s been an overall culture where associates understand they wouldn&rsquo;t be working on something unless it was important. As a result, associates are visibly passionate and driven about the problems they&rsquo;re working on, constantly striving to improve and add value. In my experience thus far, the environment at Cerner has been both engaging and supportive, allowing me to grow both personally and professionally as I strive to help improve healthcare and better the lives of others.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2018-07-26-summer-of-engineering-health-intern-story/summer-2018-intern-1.jpg"></p>

<p>As interns, we had the opportunity to attend our two-day developer conference (<a href="https://engineering.cerner.com/2013/08/devcon/">DevCon</a>) where we learned from <a href="https://www.youtube.com/user/CernerEng/featured">talks</a> on topics ranging from development technologies, innovating for maximum value, and understanding the perspectives of our clients when they use our solutions. I found it interesting to reflect on the differences between the &ldquo;best solution&rdquo; from a technology/development standpoint versus that of the end-user, maneuvering the product every day. More importantly, we discussed how we as engineers can provide users with opportunities to streamline their workflow and increase efficacy, without causing frustration among clients accustomed to a more traditional process. Changes need to be implemented gradually and seamlessly in order to get the most buy-in. Introduce change too fast and the users will be frustrated, regardless of the overall improvement.</p>

<h3>Small Data, Big Picture</h3>

<p>This summer, I have had the opportunity to work as a Software Intern on the <a href="https://www.cerner.com/solutions/lights-on-network">LightsOn Network</a> team, which develops a solution that provides both internal associates and external clients with the pertinent information necessary to make organizational decisions, whether that be in workforce experience, system configuration optimization, or organizational value. I&rsquo;ve been contributing to a project aimed at providing users with additional clarity about the status of their data at the metric, dashboard, and data source levels. The status indicators update in real-time to provide clients with the most up to date information about their data. Users can then examine the dashboards with this information in mind or drill down to identify what specific feed may be causing the issue to troubleshoot. The ability to immediately make such a large impact on clients around the world as an intern has been a humbling experience.</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2018-07-26-summer-of-engineering-health-intern-story/summer-2018-intern-3.jpg"></p>

<p>The internship experience thus far has not only helped me learn about useful development languages including <a href="https://www.djangoproject.com/">Django</a>, <a href="https://angular.io/">Angular</a>, and <a href="https://jquery.com/">JQuery</a>, but also opened my eyes to the considerations taken into account when delivering a successful analytics product and software application in general. I&rsquo;ve experienced the importance of breaking down the product into individual problems to target and then working on telling a clear story in the final product. All around me, the decisions made are not based on technology alone, but first truly consider the value added to the individual providers we aim to serve. By reducing inefficiencies in healthcare, we allow providers to do their jobs more effectively and in turn, allow more people access to healthcare.</p>

<h3>Key Takeaways</h3>

<ul>
<li>Built great connections with our team members and fellow interns</li>
<li>Learned new programming languages, but more importantly, became more experienced with engineering practices in a highly regulated industry, as well as, the agile development framework</li>
<li>Improved time management skills, especially optimizing my time usage when managing code reviews and future development tasks</li>
<li>Learned first-hand the value of diving in deep and taking advantage of every opportunity possible</li>
<li>Became inspired to continue applying computer science to the field of healthcare and constantly look for avenues to strengthen our solutions to ultimately benefit each patient</li>
<li>Realized that improvements to healthcare technology doesn’t only affect a specific group of people, but each and every one of us &ndash; the impact is enormous.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scalable Data Science With FHIR]]></title>
    <link href="http://engineering.cerner.com/blog/data-engineering-with-bunsen/"/>
    <updated>2018-07-02T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/blog/data-engineering-with-bunsen</id>
    <content type="html"><![CDATA[<p>The <a href="https://www.hl7.org/fhir/overview.html">FHIR standard</a> started as a better way to exchange healthcare data, but it also provides a solid basis for deep analytics and Machine Learning at scale. This post looks at an example from the recent <a href="https://www.fhirdevdays.com/">FHIR DevDays</a> conference that does just that. You can also run the interactive <a href="https://github.com/cerner/bunsen-tutorial">FHIR data engineering tutorial</a> used in the conference yourself.</p>

<p>Our first step is to bring FHIR data into a data lake &mdash; a computational environment where our analysis can easily and efficiently work through petabytes of data. We&rsquo;ll look at some patterns for doing so, with concrete examples using the open source <a href="http://engineering.cerner.com/bunsen">Bunsen</a> and <a href="https://spark.apache.org/">Apache Spark</a> projects.</p>

<h3>FHIR StructureDefinitions Define the Schema</h3>

<p>The schema for every dataset you see here was generated from a <a href="https://www.hl7.org/fhir/stu3/structuredefinition.html">FHIR StructureDefinition</a>. There is a big gap between building a FHIR-based schema by hand and generating it directly from the source. Every field in every query here is fully documented as a <a href="https://www.hl7.org/fhir/stu3/resourcelist.html">FHIR resource</a>, making the FHIR documentation itself the primary reference to our datasets. This means the data is well-defined, curated, and familiar to those who have used FHIR.</p>

<h3>Data Catalogs over Filesystems</h3>

<p>Organizing data in files and directories is convenient, but it becomes unwieldy when working with a large number of complex datasets. Data catalogs can meet this need &mdash; and to offer a foundation for further data governance. The <a href="https://hive.apache.org/">Apache Hive metastore</a> is the most common way to catalog data in Hadoop-based environments and has native integration with Spark, so we organize data as one FHIR resource per table. Here&rsquo;s an example from the <a href="https://github.com/cerner/bunsen-tutorial/blob/fhirdevdays2018/data_engineering_tutorial.ipynb">tutorial used at FHIR DevDays</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">spark</span><span class="o">.</span><span class="n">sql</span><span class="p">(</span><span class="s">&#39;use tutorial_small&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">spark</span><span class="o">.</span><span class="n">sql</span><span class="p">(</span><span class="s">&#39;show tables&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">toPandas</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which prints a table like this:</p>

<table>
<thead>
<tr>
<th></th>
<th align="left">database       </th>
<th align="left">tableName          </th>
<th align="left">isTemporary </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">tutorial_small </td>
<td align="left">allergyintolerance </td>
<td align="left">false</td>
</tr>
<tr>
<td></td>
<td align="left">tutorial_small </td>
<td align="left">careplan           </td>
<td align="left">false</td>
</tr>
<tr>
<td></td>
<td align="left">tutorial_small </td>
<td align="left">claim              </td>
<td align="left">false</td>
</tr>
<tr>
<td></td>
<td align="left">tutorial_small </td>
<td align="left">condition          </td>
<td align="left">false</td>
</tr>
</tbody>
</table>


<p>&hellip;and so on. This makes it trivial to use intuitive database metaphors like <code>use tutorial_small</code> and <code>select * from condition</code>.</p>

<h3>First-class ValueSet Support</h3>

<p><a href="https://www.hl7.org/fhir/stu3/valueset.html">FHIR ValueSets</a> &mdash; collections of code values for a specific purpose &mdash; are essential to querying or working with FHIR data. Therefore they should be a first-class construct in our healthcare data lake. Here&rsquo;s a look at using some FHIR valuesets in our queries as supported by <a href="https://engineering.cerner.com/bunsen/0.4.0/">Bunsen</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">bunsen.stu3.valuesets</span> <span class="kn">import</span> <span class="n">push_valuesets</span><span class="p">,</span> <span class="n">valueset</span><span class="p">,</span> <span class="n">isa_loinc</span><span class="p">,</span> <span class="n">isa_snomed</span>
</span><span class='line'>
</span><span class='line'><span class="n">push_valuesets</span><span class="p">(</span><span class="n">spark</span><span class="p">,</span>
</span><span class='line'>               <span class="p">{</span><span class="s">&#39;ldl&#39;</span>          <span class="p">:</span> <span class="n">isa_loinc</span><span class="p">(</span><span class="s">&#39;18262-6&#39;</span><span class="p">),</span> <span class="c"># Loads LOINC descendants         </span>
</span><span class='line'>                <span class="s">&#39;hdl&#39;</span>          <span class="p">:</span> <span class="n">isa_loinc</span><span class="p">(</span><span class="s">&#39;2085-9&#39;</span><span class="p">),</span>
</span><span class='line'>                <span class="s">&#39;hypertension&#39;</span> <span class="p">:</span> <span class="n">isa_snomed</span><span class="p">(</span><span class="s">&#39;38341003&#39;</span><span class="p">),</span> <span class="c"># Loads SNOMED descendants</span>
</span><span class='line'>                <span class="c"># Loaded from a FHIR ValueSet resource</span>
</span><span class='line'>                <span class="s">&#39;chd&#39;</span>          <span class="p">:</span> <span class="n">valueset</span><span class="p">(</span><span class="s">&#39;http://engineering.cerner.com/bunsen/example/chd&#39;</span><span class="p">,</span> <span class="s">&#39;201806001&#39;</span><span class="p">)});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can use these valuesets in our SQL queries via the <em>in_valueset</em> user-defined function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">spark</span><span class="o">.</span><span class="n">sql</span><span class="p">(</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">select subject.reference,</span>
</span><span class='line'><span class="s">       code.coding[0].system system,</span>
</span><span class='line'><span class="s">       code.coding[0].code code,</span>
</span><span class='line'><span class="s">       onsetDateTime</span>
</span><span class='line'><span class="s">from condition</span>
</span><span class='line'><span class="s">where in_valueset(code, &#39;chd&#39;)</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">toPandas</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th></th>
<th align="left">reference        </th>
<th align="left">system                 </th>
<th align="left">code     </th>
<th align="left">onsetDateTime      </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">urn:uuid:f88c&hellip; </td>
<td align="left"><a href="http://snomed.info/sct">http://snomed.info/sct</a> </td>
<td align="left">53741008 </td>
<td align="left">2014-09-14T07:45:47</td>
</tr>
<tr>
<td></td>
<td align="left">urn:uuid:d9ac&hellip; </td>
<td align="left"><a href="http://snomed.info/sct">http://snomed.info/sct</a> </td>
<td align="left">53741008 </td>
<td align="left">2017-05-22T06:56:19</td>
</tr>
<tr>
<td></td>
<td align="left">urn:uuid:7460&hellip; </td>
<td align="left"><a href="http://snomed.info/sct">http://snomed.info/sct</a> </td>
<td align="left">53741008 </td>
<td align="left">1974-08-06T06:50:32</td>
</tr>
<tr>
<td></td>
<td align="left">urn:uuid:5a28&hellip; </td>
<td align="left"><a href="http://snomed.info/sct">http://snomed.info/sct</a> </td>
<td align="left">53741008 </td>
<td align="left">2015-08-28T01:17:20</td>
</tr>
</tbody>
</table>


<p>It&rsquo;s worth looking at what&rsquo;s going on here: in a few lines of SQL, we are going from the rich (but somewhat complicated) FHIR Condition data model to a simple table of onset times of Coronary Heart Disease conditions.</p>

<h3>FHIR Data in Columnar Storage</h3>

<p>Users see a clear catalog of FHIR datasets, but something important is happening behind the scenes. Most data stores or serialization encodings like JSON keep data in a row-wise format. This means all columns from a given record are physically adjacent on disk, like this:</p>

<p> <img class="center" src="http://engineering.cerner.com/assets/2018-07-02-data-engineering-with-bunsen/row-wise.png" width="600"></p>

<p>This is a good fit for many workloads, but often not for analysis at scale. For instance, we may want to query the &ldquo;code&rdquo; column of several billion observation rows, and retrieve only those in a certain valueset. This is more efficient if columns are grouped together, like this:</p>

<p><img class="center" src="http://engineering.cerner.com/assets/2018-07-02-data-engineering-with-bunsen/columnar.png" width="600"></p>

<p>This is completely transparent to the user; she simply sees FHIR data from the specification.</p>

<p>So while users see the FHIR data model, it is encoded in a columnar file like Parquet. In such files, all of these &ldquo;code&rdquo; columns next to one another, allowing the queries to do tight scans over columns of interest without expensive seeking past unneeded data.</p>

<h3>Creating For-Purpose Views</h3>

<p>These are the building blocks that simplify otherwise complex analysis. For instance, if we want to identify people with diabetes-related risks, we can create a collection of simple views of the underlying data customized for that purpose. You can see the full example in the <a href="https://github.com/cerner/bunsen-tutorial/blob/fhirdevdays2018/data_engineering_tutorial.ipynb">Bunsen data engineering tutorial</a>, but we&rsquo;ll start with a dataframe of people with diabetes-related conditions as defined by a provided ValueSet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">diabetes_conditions</span> <span class="o">=</span> <span class="n">spark</span><span class="o">.</span><span class="n">sql</span><span class="p">(</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">select id condition_id,</span>
</span><span class='line'><span class="s">       subject.reference person_ref,</span>
</span><span class='line'><span class="s">       coding.system,</span>
</span><span class='line'><span class="s">       coding.code,</span>
</span><span class='line'><span class="s">       coding.display</span>
</span><span class='line'><span class="s">from condition</span>
</span><span class='line'><span class="s">     lateral view explode(code.coding) nested as coding</span>
</span><span class='line'><span class="s">where in_valueset(code, &#39;diabetes_risks&#39;)</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th></th>
<th align="left">condition_id     </th>
<th align="left">person_ref       </th>
<th align="left">system                 </th>
<th align="left">code     </th>
<th align="left">display    </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">urn:uuid:9c72&hellip; </td>
<td align="left">urn:uuid:5a28&hellip; </td>
<td align="left"><a href="http://snomed.info/sct">http://snomed.info/sct</a> </td>
<td align="left">44054006 </td>
<td align="left">Diabetes</td>
</tr>
<tr>
<td></td>
<td align="left">urn:uuid:56d5&hellip; </td>
<td align="left">urn:uuid:214f&hellip; </td>
<td align="left"><a href="http://snomed.info/sct">http://snomed.info/sct</a> </td>
<td align="left">15777000 </td>
<td align="left">Prediabetes</td>
</tr>
<tr>
<td></td>
<td align="left">urn:uuid:69de&hellip; </td>
<td align="left">urn:uuid:7f4d&hellip; </td>
<td align="left"><a href="http://snomed.info/sct">http://snomed.info/sct</a> </td>
<td align="left">15777000 </td>
<td align="left">Prediabetes</td>
</tr>
</tbody>
</table>


<p>We can inspect and validate this dataframe, and then move onto the next part of our analysis. Let&rsquo;s say we want to exclude anyone who has had a wellness visit in the last two years from our analysis. We just build a dataframe with them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">wellness_visits</span> <span class="o">=</span> <span class="n">spark</span><span class="o">.</span><span class="n">sql</span><span class="p">(</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">select subject.reference person_ref,</span>
</span><span class='line'><span class="s">       period.start encounter_start,</span>
</span><span class='line'><span class="s">       period.end encounter_end</span>
</span><span class='line'><span class="s">from encounter</span>
</span><span class='line'><span class="s">where class.code = &#39;WELLNESS&#39; and</span>
</span><span class='line'><span class="s">      period.start &gt; &#39;2016&#39;</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th></th>
<th align="left">person_ref       </th>
<th align="left">encounter_start     </th>
<th align="left">encounter_end      </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">urn:uuid:f88c&hellip; </td>
<td align="left">2016-08-21T07:45:47 </td>
<td align="left">2016-08-21T07:45:47</td>
</tr>
<tr>
<td></td>
<td align="left">urn:uuid:f88c&hellip; </td>
<td align="left">2017-08-27T07:45:47 </td>
<td align="left">2017-08-27T07:45:47</td>
</tr>
<tr>
<td></td>
<td align="left">urn:uuid:d9ac&hellip; </td>
<td align="left">2016-05-16T06:56:19 </td>
<td align="left">2016-05-16T06:56:19</td>
</tr>
</tbody>
</table>


<p>Now that we&rsquo;ve loaded and analyzed our dataframes, we can simply exclude those with wellness visits by doing an anti join between them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">diabetes_without_wellness</span> <span class="o">=</span> <span class="n">diabetes_conditions</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">wellness_visits</span><span class="p">,</span>
</span><span class='line'>                                                     <span class="p">[</span><span class="s">&#39;person_ref&#39;</span><span class="p">],</span>
</span><span class='line'>                                                     <span class="s">&#39;left_anti&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result is a simple table containing the cohort we&rsquo;re looking for! Check out the complete <a href="https://github.com/cerner/bunsen-tutorial/blob/fhirdevdays2018/data_engineering_tutorial.ipynb">tutorial notebook</a> for the full story.</p>

<h3>Reproducible Results from Immutable Data</h3>

<p>Repeatability is an essential property for deep analysis. Re-running the same notebook in the future must load <em>exactly</em> the same data and produce <em>exactly</em> the same results. This gives us the controls needed to build on and iteratively improve previous analysis over time. Fortunately, using immutable data partitions are a common pattern in this type of system. We won&rsquo;t go into depth here, but will touch on a couple good practices:</p>

<ul>
<li>Data is never mutated. Updates coming into our data lake are appended to previous data, and we can reproduce previous results by only working with data that was available at a given processing time.</li>
<li>If necessary, a policy to archive or remove previous views of data from the data catalog is used to manage size.</li>
</ul>


<p>Finally, building on such a FHIR-based data lake enables portability. The predictive model or analysis output is fully captured starting with portable data &mdash; which means it can be more easily deployed into other systems. FHIR has made great progress in exchanging data in online systems, and we see a lot of promise for data science at scale as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cerner's Open Source Contributions for Interoperability Developers]]></title>
    <link href="http://engineering.cerner.com/blog/cerners-open-source-contributions-for-interoperability-developers/"/>
    <updated>2018-06-21T00:00:00-05:00</updated>
    <id>http://engineering.cerner.com/blog/cerners-open-source-contributions-for-interoperability-developers</id>
    <content type="html"><![CDATA[<p>Open source and open standards encourage collaboration around innovation that advances the health care industry through improved interoperability. Developers across health care can come together and use open source code to share information, as well as develop and continually improve apps to support better health outcomes for patients.</p>

<p>At Cerner, developing open platforms that support interoperability standards like SMART® and FHIR® is integral to our mission of transforming health care. In addition to implementing these standards in our platforms, we also participate in organizations like <a href="http://www.hl7.org/">HL7</a> and the <a href="http://argonautwiki.hl7.org/index.php?title=Main_Page">Argonaut Project</a> to help shape and develop these standards. Cerner attends and speaks at conferences on interoperability like <a href="https://www.fhirdevdays.com/boston/">FHIR DevDays this week in Boston, MA</a>.</p>

<p>In addition to all of this work, we&rsquo;re continually developing open source projects and work for the benefit of all interoperability developers. As we speak on and support interoperability this week in Boston for FHIR DevDays, we thought it would be great to highlight our current open source interoperability work over the past couple of years.</p>

<h3>SMART on FHIR Tutorial</h3>

<p>A couple of years ago, Cerner developed a <a href="https://engineering.cerner.com/smart-on-fhir-tutorial/">tutorial</a> walking developers through the process of creating their first <a href="https://smarthealthit.org/">SMART on FHIR application</a>. With this hands-on tutorial, developers can write and deploy their SMART on FHIR application, running it against Cerner&rsquo;s <a href="https://code.cerner.com/"><em>code</em></a> Console and our <a href="https://fhir.cerner.com/">FHIR Sandbox</a>. Because SMART applications are interoperable with other vendors, the tutorial also walks the developer through running that same app against other sandboxes like the one provided by the <a href="https://launch.smarthealthit.org/">SMART Health IT project</a>. Over 700 developers have completed this tutorial as of June, 2018.</p>

<p>You can find the source code for the tutorial at <a href="https://github.com/cerner/smart-on-fhir-tutorial">https://github.com/cerner/smart-on-fhir-tutorial</a></p>

<h3>SMART on FHIR Apps in Embedded Browsers</h3>

<p>Over the years, Cerner has contributed to several changes to the popular open source JavaScript library (<a href="https://github.com/smart-on-fhir/client-js">fhir-client.js</a>, maintained by the SMART Health IT organization), used by many SMART app developers for launching and interacting with the FHIR API from their web-based SMART application. Running these types of applications within an embedded IE browser in a Windows application (like Cerner&rsquo;s PowerChart® EHR) requires a bit of added effort to ensure SMART apps running concurrently do not exhibit critical patient safety issues. Cerner released an <a href="https://github.com/cerner/fhir-client-cerner-additions">open source library</a>, used in conjunction with fhir-client.js, to prevent these issues from happening. Our open source library is in use by SMART app developers running their apps not only within Cerner EHR environments, but also within other EHR vendor environments.</p>

<p>You can find the source code for this project at <a href="https://github.com/cerner/fhir-client-cerner-additions">https://github.com/cerner/fhir-client-cerner-additions</a></p>

<h3>ASCVD Risk Calculator SMART Application</h3>

<p>Through collaborative efforts, Cerner and <a href="https://www.dukehealth.org/">Duke University Health System</a> recognized a need for the development of a more clinically relevant cardiac risk calculator app. To solve for this, together we developed the open source <a href="https://apps.smarthealthit.org/app/ascvd-risk-calculator">ASCVD Risk Calculator SMART application</a>. Not only is the app freely available to all Cerner clients, but all our work on the app is open source so that other hospitals and health systems can  run and modify it to meet their needs.</p>

<p>You can find the ASCVD Risk Calculator source code at <a href="https://github.com/cerner/ascvd-risk-calculator">https://github.com/cerner/ascvd-risk-calculator</a></p>

<h3>CDS Hooks</h3>

<p><a href="https://cds-hooks.org">CDS Hooks</a> is an emerging standard for interoperable clinical decision support. Similar to our SMART on FHIR tutorial, Cerner wrote an <a href="https://github.com/cerner/cds-services-tutorial">open source, hands-on tutorial</a> that walks a developer through writing their first CDS Service.</p>

<p>Cerner is also the primary developer and maintainer of the <a href="https://sandbox.cds-hooks.org/">CDS Hooks Sandbox</a>, an open source Sandbox used by the CDS Hooks community. The CDS Hooks Sandbox has been proven to be incredibly valuable and helps developers test and demonstrate their CDS Services against any FHIR server of their choosing.</p>

<p>You can find the CDS Hooks Sandbox source code at <a href="https://github.com/cds-hooks/sandbox">https://github.com/cds-hooks/sandbox</a></p>

<h3>Bunsen: FHIR and Big Data</h3>

<p>Big data can have a great impact on health care when used correctly. Health care organizations are analyzing big data to improve health care in a number of ways, from increasing revenue and improving efficiency to predicting diseases and improving patient care. As technology advance, health care organizations will continue to gather more data and developers will need to find ways to make that data useful and actionable.</p>

<p>Cerner has many years of experience working with big data. To support big data developers, we made Bunsen open source. Bunsen is a project that makes it easy for developers to explore, transform and analyze FHIR data with Apache Spark. In addition, Cerner recently released a <a href="https://github.com/cerner/bunsen-tutorial">tutorial for getting started with Bunsen</a>. You can <a href="https://engineering.cerner.com/blog/announcing-bunsen-fhir-data-with-apache-spark/">read more about Bunsen on our blog post here</a>.</p>

<p>You can view the Bunsen source code at <a href="https://github.com/cerner/bunsen">https://github.com/cerner/bunsen</a></p>
]]></content>
  </entry>
  
</feed>
